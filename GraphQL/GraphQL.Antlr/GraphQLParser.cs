//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\colin\Documents\GitHub\AS2017B\AS2017B\src\AS.GraphQL\GraphQL.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;
using GraphQL;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class GraphQLParser : Parser
{
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
    public const int
        T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
        T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
        BOOLEAN = 18, NAME = 19, STRING = 20, NUMBER = 21, WS = 22, COMMENT = 23;
    public const int
        RULE_document = 0, RULE_definition = 1, RULE_operationDefinition = 2,
        RULE_selectionSet = 3, RULE_operationType = 4, RULE_selection = 5, RULE_field = 6,
        RULE_fieldName = 7, RULE_alias = 8, RULE_arguments = 9, RULE_argument = 10,
        RULE_fragmentSpread = 11, RULE_inlineFragment = 12, RULE_fragmentDefinition = 13,
        RULE_fragmentName = 14, RULE_directives = 15, RULE_directive = 16, RULE_typeCondition = 17,
        RULE_variableDefinitions = 18, RULE_variableDefinition = 19, RULE_variable = 20,
        RULE_defaultValue = 21, RULE_valueOrVariable = 22, RULE_value = 23, RULE_type = 24,
        RULE_typeName = 25, RULE_listType = 26, RULE_nonNullType = 27, RULE_array = 28,
        RULE_object = 29;
    public static readonly string[] ruleNames = {
        "document", "definition", "operationDefinition", "selectionSet", "operationType",
        "selection", "field", "fieldName", "alias", "arguments", "argument", "fragmentSpread",
        "inlineFragment", "fragmentDefinition", "fragmentName", "directives",
        "directive", "typeCondition", "variableDefinitions", "variableDefinition",
        "variable", "defaultValue", "valueOrVariable", "value", "type", "typeName",
        "listType", "nonNullType", "array", "object"
    };

    private static readonly string[] _LiteralNames = {
        null, "'{'", "','", "'}'", "'query'", "'mutation'", "':'", "'('", "')'",
        "'...'", "'on'", "'fragment'", "'@'", "'$'", "'='", "'['", "']'", "'!'"
    };
    private static readonly string[] _SymbolicNames = {
        null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, "BOOLEAN", "NAME", "STRING", "NUMBER",
        "WS", "COMMENT"
    };
    public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

    [NotNull]
    public override IVocabulary Vocabulary
    {
        get
        {
            return DefaultVocabulary;
        }
    }

    public override string GrammarFileName { get { return "GraphQL.g4"; } }

    public override string[] RuleNames { get { return ruleNames; } }

    public override string SerializedAtn { get { return _serializedATN; } }

    static GraphQLParser()
    {
        decisionToDFA = new DFA[_ATN.NumberOfDecisions];
        for (int i = 0; i < _ATN.NumberOfDecisions; i++)
        {
            decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
        }
    }

    public GraphQLParser(ITokenStream input)
        : base(input)
    {
        Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
    }
    public partial class DocumentContext : ParserRuleContext
    {
        public DefinitionContext[] definition()
        {
            return GetRuleContexts<DefinitionContext>();
        }
        public DefinitionContext definition(int i)
        {
            return GetRuleContext<DefinitionContext>(i);
        }
        public DocumentContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_document; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterDocument(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitDocument(this);
        }
    }

    [RuleVersion(0)]
    public DocumentContext document()
    {
        DocumentContext _localctx = new DocumentContext(Context, State);
        EnterRule(_localctx, 0, RULE_document);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 61;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 60; definition();
                        }
                    }
                    State = 63;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__10))) != 0));
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DefinitionContext : ParserRuleContext
    {
        public OperationDefinitionContext operationDefinition()
        {
            return GetRuleContext<OperationDefinitionContext>(0);
        }
        public FragmentDefinitionContext fragmentDefinition()
        {
            return GetRuleContext<FragmentDefinitionContext>(0);
        }
        public DefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_definition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterDefinition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitDefinition(this);
        }
    }

    [RuleVersion(0)]
    public DefinitionContext definition()
    {
        DefinitionContext _localctx = new DefinitionContext(Context, State);
        EnterRule(_localctx, 2, RULE_definition);
        try
        {
            State = 67;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__0:
                case T__3:
                case T__4:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 65; operationDefinition();
                    }
                    break;
                case T__10:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 66; fragmentDefinition();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperationDefinitionContext : ParserRuleContext
    {
        public SelectionSetContext selectionSet()
        {
            return GetRuleContext<SelectionSetContext>(0);
        }
        public OperationTypeContext operationType()
        {
            return GetRuleContext<OperationTypeContext>(0);
        }
        public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
        public VariableDefinitionsContext variableDefinitions()
        {
            return GetRuleContext<VariableDefinitionsContext>(0);
        }
        public DirectivesContext directives()
        {
            return GetRuleContext<DirectivesContext>(0);
        }
        public OperationDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operationDefinition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterOperationDefinition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitOperationDefinition(this);
        }
    }

    [RuleVersion(0)]
    public OperationDefinitionContext operationDefinition()
    {
        OperationDefinitionContext _localctx = new OperationDefinitionContext(Context, State);
        EnterRule(_localctx, 4, RULE_operationDefinition);
        int _la;
        try
        {
            State = 80;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__0:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 69; selectionSet();
                    }
                    break;
                case T__3:
                case T__4:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 70; operationType();
                        State = 71; Match(NAME);
                        State = 73;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__6)
                        {
                            {
                                State = 72; variableDefinitions();
                            }
                        }

                        State = 76;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__11)
                        {
                            {
                                State = 75; directives();
                            }
                        }

                        State = 78; selectionSet();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectionSetContext : ParserRuleContext
    {
        public SelectionContext[] selection()
        {
            return GetRuleContexts<SelectionContext>();
        }
        public SelectionContext selection(int i)
        {
            return GetRuleContext<SelectionContext>(i);
        }
        public SelectionSetContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selectionSet; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterSelectionSet(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitSelectionSet(this);
        }
    }

    [RuleVersion(0)]
    public SelectionSetContext selectionSet()
    {
        SelectionSetContext _localctx = new SelectionSetContext(Context, State);
        EnterRule(_localctx, 6, RULE_selectionSet);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 82; Match(T__0);
                State = 83; selection();
                State = 90;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__8) | (1L << NAME))) != 0))
                {
                    {
                        {
                            State = 85;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == T__1)
                            {
                                {
                                    State = 84; Match(T__1);
                                }
                            }

                            State = 87; selection();
                        }
                    }
                    State = 92;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 93; Match(T__2);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OperationTypeContext : ParserRuleContext
    {
        public OperationTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_operationType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterOperationType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitOperationType(this);
        }
    }

    [RuleVersion(0)]
    public OperationTypeContext operationType()
    {
        OperationTypeContext _localctx = new OperationTypeContext(Context, State);
        EnterRule(_localctx, 8, RULE_operationType);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 95;
                _la = TokenStream.LA(1);
                if (!(_la == T__3 || _la == T__4))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectionContext : ParserRuleContext
    {
        public FieldContext field()
        {
            return GetRuleContext<FieldContext>(0);
        }
        public FragmentSpreadContext fragmentSpread()
        {
            return GetRuleContext<FragmentSpreadContext>(0);
        }
        public InlineFragmentContext inlineFragment()
        {
            return GetRuleContext<InlineFragmentContext>(0);
        }
        public SelectionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selection; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterSelection(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitSelection(this);
        }
    }

    [RuleVersion(0)]
    public SelectionContext selection()
    {
        SelectionContext _localctx = new SelectionContext(Context, State);
        EnterRule(_localctx, 10, RULE_selection);
        try
        {
            State = 100;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 7, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 97; field();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 98; fragmentSpread();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 99; inlineFragment();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FieldContext : ParserRuleContext
    {
        public FieldNameContext fieldName()
        {
            return GetRuleContext<FieldNameContext>(0);
        }
        public ArgumentsContext arguments()
        {
            return GetRuleContext<ArgumentsContext>(0);
        }
        public DirectivesContext directives()
        {
            return GetRuleContext<DirectivesContext>(0);
        }
        public SelectionSetContext selectionSet()
        {
            return GetRuleContext<SelectionSetContext>(0);
        }
        public FieldContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_field; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterField(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitField(this);
        }
    }

    [RuleVersion(0)]
    public FieldContext field()
    {
        FieldContext _localctx = new FieldContext(Context, State);
        EnterRule(_localctx, 12, RULE_field);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 102; fieldName();
                State = 104;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__6)
                {
                    {
                        State = 103; arguments();
                    }
                }

                State = 107;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__11)
                {
                    {
                        State = 106; directives();
                    }
                }

                State = 110;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__0)
                {
                    {
                        State = 109; selectionSet();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FieldNameContext : ParserRuleContext
    {
        public AliasContext alias()
        {
            return GetRuleContext<AliasContext>(0);
        }
        public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
        public FieldNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fieldName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterFieldName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitFieldName(this);
        }
    }

    [RuleVersion(0)]
    public FieldNameContext fieldName()
    {
        FieldNameContext _localctx = new FieldNameContext(Context, State);
        EnterRule(_localctx, 14, RULE_fieldName);
        try
        {
            State = 114;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 11, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 112; alias();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 113; Match(NAME);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AliasContext : ParserRuleContext
    {
        public ITerminalNode[] NAME() { return GetTokens(GraphQLParser.NAME); }
        public ITerminalNode NAME(int i)
        {
            return GetToken(GraphQLParser.NAME, i);
        }
        public AliasContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alias; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterAlias(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitAlias(this);
        }
    }

    [RuleVersion(0)]
    public AliasContext alias()
    {
        AliasContext _localctx = new AliasContext(Context, State);
        EnterRule(_localctx, 16, RULE_alias);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 116; Match(NAME);
                State = 117; Match(T__5);
                State = 118; Match(NAME);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ArgumentsContext : ParserRuleContext
    {
        public ArgumentContext[] argument()
        {
            return GetRuleContexts<ArgumentContext>();
        }
        public ArgumentContext argument(int i)
        {
            return GetRuleContext<ArgumentContext>(i);
        }
        public ArgumentsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_arguments; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterArguments(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitArguments(this);
        }
    }

    [RuleVersion(0)]
    public ArgumentsContext arguments()
    {
        ArgumentsContext _localctx = new ArgumentsContext(Context, State);
        EnterRule(_localctx, 18, RULE_arguments);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 120; Match(T__6);
                State = 121; argument();
                State = 126;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__1)
                {
                    {
                        {
                            State = 122; Match(T__1);
                            State = 123; argument();
                        }
                    }
                    State = 128;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 129; Match(T__7);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ArgumentContext : ParserRuleContext
    {
        public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
        public ValueOrVariableContext valueOrVariable()
        {
            return GetRuleContext<ValueOrVariableContext>(0);
        }
        public ArgumentContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_argument; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterArgument(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitArgument(this);
        }
    }

    [RuleVersion(0)]
    public ArgumentContext argument()
    {
        ArgumentContext _localctx = new ArgumentContext(Context, State);
        EnterRule(_localctx, 20, RULE_argument);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 131; Match(NAME);
                State = 132; Match(T__5);
                State = 133; valueOrVariable();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FragmentSpreadContext : ParserRuleContext
    {
        public FragmentNameContext fragmentName()
        {
            return GetRuleContext<FragmentNameContext>(0);
        }
        public DirectivesContext directives()
        {
            return GetRuleContext<DirectivesContext>(0);
        }
        public FragmentSpreadContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fragmentSpread; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterFragmentSpread(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitFragmentSpread(this);
        }
    }

    [RuleVersion(0)]
    public FragmentSpreadContext fragmentSpread()
    {
        FragmentSpreadContext _localctx = new FragmentSpreadContext(Context, State);
        EnterRule(_localctx, 22, RULE_fragmentSpread);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 135; Match(T__8);
                State = 136; fragmentName();
                State = 138;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__11)
                {
                    {
                        State = 137; directives();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class InlineFragmentContext : ParserRuleContext
    {
        public TypeConditionContext typeCondition()
        {
            return GetRuleContext<TypeConditionContext>(0);
        }
        public SelectionSetContext selectionSet()
        {
            return GetRuleContext<SelectionSetContext>(0);
        }
        public DirectivesContext directives()
        {
            return GetRuleContext<DirectivesContext>(0);
        }
        public InlineFragmentContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_inlineFragment; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterInlineFragment(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitInlineFragment(this);
        }
    }

    [RuleVersion(0)]
    public InlineFragmentContext inlineFragment()
    {
        InlineFragmentContext _localctx = new InlineFragmentContext(Context, State);
        EnterRule(_localctx, 24, RULE_inlineFragment);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 140; Match(T__8);
                State = 141; Match(T__9);
                State = 142; typeCondition();
                State = 144;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__11)
                {
                    {
                        State = 143; directives();
                    }
                }

                State = 146; selectionSet();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FragmentDefinitionContext : ParserRuleContext
    {
        public FragmentNameContext fragmentName()
        {
            return GetRuleContext<FragmentNameContext>(0);
        }
        public TypeConditionContext typeCondition()
        {
            return GetRuleContext<TypeConditionContext>(0);
        }
        public SelectionSetContext selectionSet()
        {
            return GetRuleContext<SelectionSetContext>(0);
        }
        public DirectivesContext directives()
        {
            return GetRuleContext<DirectivesContext>(0);
        }
        public FragmentDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fragmentDefinition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterFragmentDefinition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitFragmentDefinition(this);
        }
    }

    [RuleVersion(0)]
    public FragmentDefinitionContext fragmentDefinition()
    {
        FragmentDefinitionContext _localctx = new FragmentDefinitionContext(Context, State);
        EnterRule(_localctx, 26, RULE_fragmentDefinition);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 148; Match(T__10);
                State = 149; fragmentName();
                State = 150; Match(T__9);
                State = 151; typeCondition();
                State = 153;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__11)
                {
                    {
                        State = 152; directives();
                    }
                }

                State = 155; selectionSet();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FragmentNameContext : ParserRuleContext
    {
        public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
        public FragmentNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fragmentName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterFragmentName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitFragmentName(this);
        }
    }

    [RuleVersion(0)]
    public FragmentNameContext fragmentName()
    {
        FragmentNameContext _localctx = new FragmentNameContext(Context, State);
        EnterRule(_localctx, 28, RULE_fragmentName);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 157; Match(NAME);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DirectivesContext : ParserRuleContext
    {
        public DirectiveContext[] directive()
        {
            return GetRuleContexts<DirectiveContext>();
        }
        public DirectiveContext directive(int i)
        {
            return GetRuleContext<DirectiveContext>(i);
        }
        public DirectivesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_directives; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterDirectives(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitDirectives(this);
        }
    }

    [RuleVersion(0)]
    public DirectivesContext directives()
    {
        DirectivesContext _localctx = new DirectivesContext(Context, State);
        EnterRule(_localctx, 30, RULE_directives);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 160;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 159; directive();
                        }
                    }
                    State = 162;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while (_la == T__11);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DirectiveContext : ParserRuleContext
    {
        public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
        public ValueOrVariableContext valueOrVariable()
        {
            return GetRuleContext<ValueOrVariableContext>(0);
        }
        public ArgumentContext argument()
        {
            return GetRuleContext<ArgumentContext>(0);
        }
        public DirectiveContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_directive; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterDirective(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitDirective(this);
        }
    }

    [RuleVersion(0)]
    public DirectiveContext directive()
    {
        DirectiveContext _localctx = new DirectiveContext(Context, State);
        EnterRule(_localctx, 32, RULE_directive);
        try
        {
            State = 176;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 17, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 164; Match(T__11);
                        State = 165; Match(NAME);
                        State = 166; Match(T__5);
                        State = 167; valueOrVariable();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 168; Match(T__11);
                        State = 169; Match(NAME);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 170; Match(T__11);
                        State = 171; Match(NAME);
                        State = 172; Match(T__6);
                        State = 173; argument();
                        State = 174; Match(T__7);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TypeConditionContext : ParserRuleContext
    {
        public TypeNameContext typeName()
        {
            return GetRuleContext<TypeNameContext>(0);
        }
        public TypeConditionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_typeCondition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterTypeCondition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitTypeCondition(this);
        }
    }

    [RuleVersion(0)]
    public TypeConditionContext typeCondition()
    {
        TypeConditionContext _localctx = new TypeConditionContext(Context, State);
        EnterRule(_localctx, 34, RULE_typeCondition);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 178; typeName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VariableDefinitionsContext : ParserRuleContext
    {
        public VariableDefinitionContext[] variableDefinition()
        {
            return GetRuleContexts<VariableDefinitionContext>();
        }
        public VariableDefinitionContext variableDefinition(int i)
        {
            return GetRuleContext<VariableDefinitionContext>(i);
        }
        public VariableDefinitionsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_variableDefinitions; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterVariableDefinitions(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitVariableDefinitions(this);
        }
    }

    [RuleVersion(0)]
    public VariableDefinitionsContext variableDefinitions()
    {
        VariableDefinitionsContext _localctx = new VariableDefinitionsContext(Context, State);
        EnterRule(_localctx, 36, RULE_variableDefinitions);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 180; Match(T__6);
                State = 181; variableDefinition();
                State = 186;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__1)
                {
                    {
                        {
                            State = 182; Match(T__1);
                            State = 183; variableDefinition();
                        }
                    }
                    State = 188;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 189; Match(T__7);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VariableDefinitionContext : ParserRuleContext
    {
        public VariableContext variable()
        {
            return GetRuleContext<VariableContext>(0);
        }
        public TypeContext type()
        {
            return GetRuleContext<TypeContext>(0);
        }
        public DefaultValueContext defaultValue()
        {
            return GetRuleContext<DefaultValueContext>(0);
        }
        public VariableDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_variableDefinition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterVariableDefinition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitVariableDefinition(this);
        }
    }

    [RuleVersion(0)]
    public VariableDefinitionContext variableDefinition()
    {
        VariableDefinitionContext _localctx = new VariableDefinitionContext(Context, State);
        EnterRule(_localctx, 38, RULE_variableDefinition);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 191; variable();
                State = 192; Match(T__5);
                State = 193; type();
                State = 195;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == T__13)
                {
                    {
                        State = 194; defaultValue();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VariableContext : ParserRuleContext
    {
        public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
        public VariableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_variable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterVariable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitVariable(this);
        }
    }

    [RuleVersion(0)]
    public VariableContext variable()
    {
        VariableContext _localctx = new VariableContext(Context, State);
        EnterRule(_localctx, 40, RULE_variable);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 197; Match(T__12);
                State = 198; Match(NAME);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DefaultValueContext : ParserRuleContext
    {
        public ValueContext value()
        {
            return GetRuleContext<ValueContext>(0);
        }
        public DefaultValueContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_defaultValue; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterDefaultValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitDefaultValue(this);
        }
    }

    [RuleVersion(0)]
    public DefaultValueContext defaultValue()
    {
        DefaultValueContext _localctx = new DefaultValueContext(Context, State);
        EnterRule(_localctx, 42, RULE_defaultValue);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 200; Match(T__13);
                State = 201; value();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ValueOrVariableContext : ParserRuleContext
    {
        public ValueContext value()
        {
            return GetRuleContext<ValueContext>(0);
        }
        public VariableContext variable()
        {
            return GetRuleContext<VariableContext>(0);
        }
        public ValueOrVariableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_valueOrVariable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterValueOrVariable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitValueOrVariable(this);
        }
    }

    [RuleVersion(0)]
    public ValueOrVariableContext valueOrVariable()
    {
        ValueOrVariableContext _localctx = new ValueOrVariableContext(Context, State);
        EnterRule(_localctx, 44, RULE_valueOrVariable);
        try
        {
            State = 205;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case T__0:
                case T__14:
                case BOOLEAN:
                case NAME:
                case STRING:
                case NUMBER:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 203; value();
                    }
                    break;
                case T__12:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 204; variable();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ValueContext : ParserRuleContext
    {
        public ValueContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_value; } }

        public ValueContext() { }
        public virtual void CopyFrom(ValueContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class ArrayValueContext : ValueContext
    {
        public ArrayContext array()
        {
            return GetRuleContext<ArrayContext>(0);
        }
        public ArrayValueContext(ValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterArrayValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitArrayValue(this);
        }
    }
    public partial class NumberValueContext : ValueContext
    {
        public ITerminalNode NUMBER() { return GetToken(GraphQLParser.NUMBER, 0); }
        public NumberValueContext(ValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterNumberValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitNumberValue(this);
        }
    }
    public partial class StringValueContext : ValueContext
    {
        public ITerminalNode STRING() { return GetToken(GraphQLParser.STRING, 0); }
        public StringValueContext(ValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterStringValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitStringValue(this);
        }
    }
    public partial class EnumValueContext : ValueContext
    {
        public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
        public EnumValueContext(ValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterEnumValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitEnumValue(this);
        }
    }
    public partial class ObjectValueContext : ValueContext
    {
        public ObjectContext @object()
        {
            return GetRuleContext<ObjectContext>(0);
        }
        public ObjectValueContext(ValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterObjectValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitObjectValue(this);
        }
    }
    public partial class BooleanValueContext : ValueContext
    {
        public ITerminalNode BOOLEAN() { return GetToken(GraphQLParser.BOOLEAN, 0); }
        public BooleanValueContext(ValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterBooleanValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitBooleanValue(this);
        }
    }

    [RuleVersion(0)]
    public ValueContext value()
    {
        ValueContext _localctx = new ValueContext(Context, State);
        EnterRule(_localctx, 46, RULE_value);
        try
        {
            State = 213;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case STRING:
                    _localctx = new StringValueContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 207; Match(STRING);
                    }
                    break;
                case NUMBER:
                    _localctx = new NumberValueContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 208; Match(NUMBER);
                    }
                    break;
                case BOOLEAN:
                    _localctx = new BooleanValueContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 209; Match(BOOLEAN);
                    }
                    break;
                case T__14:
                    _localctx = new ArrayValueContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 210; array();
                    }
                    break;
                case T__0:
                    _localctx = new ObjectValueContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 211; @object();
                    }
                    break;
                case NAME:
                    _localctx = new EnumValueContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 212; Match(NAME);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TypeContext : ParserRuleContext
    {
        public TypeNameContext typeName()
        {
            return GetRuleContext<TypeNameContext>(0);
        }
        public NonNullTypeContext nonNullType()
        {
            return GetRuleContext<NonNullTypeContext>(0);
        }
        public ListTypeContext listType()
        {
            return GetRuleContext<ListTypeContext>(0);
        }
        public TypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_type; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitType(this);
        }
    }

    [RuleVersion(0)]
    public TypeContext type()
    {
        TypeContext _localctx = new TypeContext(Context, State);
        EnterRule(_localctx, 48, RULE_type);
        int _la;
        try
        {
            State = 223;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case NAME:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 215; typeName();
                        State = 217;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__16)
                        {
                            {
                                State = 216; nonNullType();
                            }
                        }

                    }
                    break;
                case T__14:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 219; listType();
                        State = 221;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == T__16)
                        {
                            {
                                State = 220; nonNullType();
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TypeNameContext : ParserRuleContext
    {
        public ITerminalNode NAME() { return GetToken(GraphQLParser.NAME, 0); }
        public TypeNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_typeName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterTypeName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitTypeName(this);
        }
    }

    [RuleVersion(0)]
    public TypeNameContext typeName()
    {
        TypeNameContext _localctx = new TypeNameContext(Context, State);
        EnterRule(_localctx, 50, RULE_typeName);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 225; Match(NAME);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ListTypeContext : ParserRuleContext
    {
        public TypeContext type()
        {
            return GetRuleContext<TypeContext>(0);
        }
        public ListTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_listType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterListType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitListType(this);
        }
    }

    [RuleVersion(0)]
    public ListTypeContext listType()
    {
        ListTypeContext _localctx = new ListTypeContext(Context, State);
        EnterRule(_localctx, 52, RULE_listType);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 227; Match(T__14);
                State = 228; type();
                State = 229; Match(T__15);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class NonNullTypeContext : ParserRuleContext
    {
        public NonNullTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_nonNullType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterNonNullType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitNonNullType(this);
        }
    }

    [RuleVersion(0)]
    public NonNullTypeContext nonNullType()
    {
        NonNullTypeContext _localctx = new NonNullTypeContext(Context, State);
        EnterRule(_localctx, 54, RULE_nonNullType);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 231; Match(T__16);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ArrayContext : ParserRuleContext
    {
        public ValueContext[] value()
        {
            return GetRuleContexts<ValueContext>();
        }
        public ValueContext value(int i)
        {
            return GetRuleContext<ValueContext>(i);
        }
        public ArrayContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_array; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterArray(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitArray(this);
        }
    }

    [RuleVersion(0)]
    public ArrayContext array()
    {
        ArrayContext _localctx = new ArrayContext(Context, State);
        EnterRule(_localctx, 56, RULE_array);
        int _la;
        try
        {
            State = 246;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 26, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 233; Match(T__14);
                        State = 234; value();
                        State = 239;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == T__1)
                        {
                            {
                                {
                                    State = 235; Match(T__1);
                                    State = 236; value();
                                }
                            }
                            State = 241;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 242; Match(T__15);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 244; Match(T__14);
                        State = 245; Match(T__15);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ObjectContext : ParserRuleContext
    {
        public ITerminalNode[] NAME() { return GetTokens(GraphQLParser.NAME); }
        public ITerminalNode NAME(int i)
        {
            return GetToken(GraphQLParser.NAME, i);
        }
        public ValueContext[] value()
        {
            return GetRuleContexts<ValueContext>();
        }
        public ValueContext value(int i)
        {
            return GetRuleContext<ValueContext>(i);
        }
        public ObjectContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_object; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.EnterObject(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IGraphQLListener typedListener = listener as IGraphQLListener;
            if (typedListener != null) typedListener.ExitObject(this);
        }
    }

    [RuleVersion(0)]
    public ObjectContext @object()
    {
        ObjectContext _localctx = new ObjectContext(Context, State);
        EnterRule(_localctx, 58, RULE_object);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 248; Match(T__0);
                State = 249; Match(NAME);
                State = 250; Match(T__5);
                State = 251; value();
                State = 258;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == T__1)
                {
                    {
                        {
                            State = 252; Match(T__1);
                            State = 253; Match(NAME);
                            State = 254; Match(T__5);
                            State = 255; value();
                        }
                    }
                    State = 260;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 261; Match(T__2);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    private static string _serializedATN = _serializeATN();
    private static string _serializeATN()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x19");
        sb.Append("\x10A\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
        sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
        sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
        sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
        sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
        sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x6");
        sb.Append("\x2@\n\x2\r\x2\xE\x2\x41\x3\x3\x3\x3\x5\x3\x46\n\x3\x3\x4\x3");
        sb.Append("\x4\x3\x4\x3\x4\x5\x4L\n\x4\x3\x4\x5\x4O\n\x4\x3\x4\x3\x4\x5");
        sb.Append("\x4S\n\x4\x3\x5\x3\x5\x3\x5\x5\x5X\n\x5\x3\x5\a\x5[\n\x5\f\x5");
        sb.Append("\xE\x5^\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5\ag\n");
        sb.Append("\a\x3\b\x3\b\x5\bk\n\b\x3\b\x5\bn\n\b\x3\b\x5\bq\n\b\x3\t\x3");
        sb.Append("\t\x5\tu\n\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\a\v\x7F");
        sb.Append("\n\v\f\v\xE\v\x82\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3");
        sb.Append("\r\x3\r\x5\r\x8D\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x93\n\xE");
        sb.Append("\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x9C\n\xF\x3");
        sb.Append("\xF\x3\xF\x3\x10\x3\x10\x3\x11\x6\x11\xA3\n\x11\r\x11\xE\x11");
        sb.Append("\xA4\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12");
        sb.Append("\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xB3\n\x12\x3\x13\x3\x13");
        sb.Append("\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\xBB\n\x14\f\x14\xE\x14\xBE");
        sb.Append("\v\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xC6");
        sb.Append("\n\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18");
        sb.Append("\x5\x18\xD0\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19");
        sb.Append("\x5\x19\xD8\n\x19\x3\x1A\x3\x1A\x5\x1A\xDC\n\x1A\x3\x1A\x3\x1A");
        sb.Append("\x5\x1A\xE0\n\x1A\x5\x1A\xE2\n\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C");
        sb.Append("\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E");
        sb.Append("\xF0\n\x1E\f\x1E\xE\x1E\xF3\v\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E");
        sb.Append("\x5\x1E\xF9\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F");
        sb.Append("\x3\x1F\x3\x1F\a\x1F\x103\n\x1F\f\x1F\xE\x1F\x106\v\x1F\x3\x1F");
        sb.Append("\x3\x1F\x3\x1F\x2\x2 \x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18");
        sb.Append("\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<\x2\x3\x3\x2\x6\a");
        sb.Append("\x10D\x2?\x3\x2\x2\x2\x4\x45\x3\x2\x2\x2\x6R\x3\x2\x2\x2\bT");
        sb.Append("\x3\x2\x2\x2\n\x61\x3\x2\x2\x2\f\x66\x3\x2\x2\x2\xEh\x3\x2\x2");
        sb.Append("\x2\x10t\x3\x2\x2\x2\x12v\x3\x2\x2\x2\x14z\x3\x2\x2\x2\x16\x85");
        sb.Append("\x3\x2\x2\x2\x18\x89\x3\x2\x2\x2\x1A\x8E\x3\x2\x2\x2\x1C\x96");
        sb.Append("\x3\x2\x2\x2\x1E\x9F\x3\x2\x2\x2 \xA2\x3\x2\x2\x2\"\xB2\x3\x2");
        sb.Append("\x2\x2$\xB4\x3\x2\x2\x2&\xB6\x3\x2\x2\x2(\xC1\x3\x2\x2\x2*\xC7");
        sb.Append("\x3\x2\x2\x2,\xCA\x3\x2\x2\x2.\xCF\x3\x2\x2\x2\x30\xD7\x3\x2");
        sb.Append("\x2\x2\x32\xE1\x3\x2\x2\x2\x34\xE3\x3\x2\x2\x2\x36\xE5\x3\x2");
        sb.Append("\x2\x2\x38\xE9\x3\x2\x2\x2:\xF8\x3\x2\x2\x2<\xFA\x3\x2\x2\x2");
        sb.Append(">@\x5\x4\x3\x2?>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41?\x3\x2\x2");
        sb.Append("\x2\x41\x42\x3\x2\x2\x2\x42\x3\x3\x2\x2\x2\x43\x46\x5\x6\x4");
        sb.Append("\x2\x44\x46\x5\x1C\xF\x2\x45\x43\x3\x2\x2\x2\x45\x44\x3\x2\x2");
        sb.Append("\x2\x46\x5\x3\x2\x2\x2GS\x5\b\x5\x2HI\x5\n\x6\x2IK\a\x15\x2");
        sb.Append("\x2JL\x5&\x14\x2KJ\x3\x2\x2\x2KL\x3\x2\x2\x2LN\x3\x2\x2\x2M");
        sb.Append("O\x5 \x11\x2NM\x3\x2\x2\x2NO\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\x5");
        sb.Append("\b\x5\x2QS\x3\x2\x2\x2RG\x3\x2\x2\x2RH\x3\x2\x2\x2S\a\x3\x2");
        sb.Append("\x2\x2TU\a\x3\x2\x2U\\\x5\f\a\x2VX\a\x4\x2\x2WV\x3\x2\x2\x2");
        sb.Append("WX\x3\x2\x2\x2XY\x3\x2\x2\x2Y[\x5\f\a\x2ZW\x3\x2\x2\x2[^\x3");
        sb.Append("\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x3\x2\x2\x2^\\\x3");
        sb.Append("\x2\x2\x2_`\a\x5\x2\x2`\t\x3\x2\x2\x2\x61\x62\t\x2\x2\x2\x62");
        sb.Append("\v\x3\x2\x2\x2\x63g\x5\xE\b\x2\x64g\x5\x18\r\x2\x65g\x5\x1A");
        sb.Append("\xE\x2\x66\x63\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66\x65\x3\x2");
        sb.Append("\x2\x2g\r\x3\x2\x2\x2hj\x5\x10\t\x2ik\x5\x14\v\x2ji\x3\x2\x2");
        sb.Append("\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2ln\x5 \x11\x2ml\x3\x2\x2\x2m");
        sb.Append("n\x3\x2\x2\x2np\x3\x2\x2\x2oq\x5\b\x5\x2po\x3\x2\x2\x2pq\x3");
        sb.Append("\x2\x2\x2q\xF\x3\x2\x2\x2ru\x5\x12\n\x2su\a\x15\x2\x2tr\x3\x2");
        sb.Append("\x2\x2ts\x3\x2\x2\x2u\x11\x3\x2\x2\x2vw\a\x15\x2\x2wx\a\b\x2");
        sb.Append("\x2xy\a\x15\x2\x2y\x13\x3\x2\x2\x2z{\a\t\x2\x2{\x80\x5\x16\f");
        sb.Append("\x2|}\a\x4\x2\x2}\x7F\x5\x16\f\x2~|\x3\x2\x2\x2\x7F\x82\x3\x2");
        sb.Append("\x2\x2\x80~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x83\x3\x2\x2");
        sb.Append("\x2\x82\x80\x3\x2\x2\x2\x83\x84\a\n\x2\x2\x84\x15\x3\x2\x2\x2");
        sb.Append("\x85\x86\a\x15\x2\x2\x86\x87\a\b\x2\x2\x87\x88\x5.\x18\x2\x88");
        sb.Append("\x17\x3\x2\x2\x2\x89\x8A\a\v\x2\x2\x8A\x8C\x5\x1E\x10\x2\x8B");
        sb.Append("\x8D\x5 \x11\x2\x8C\x8B\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D");
        sb.Append("\x19\x3\x2\x2\x2\x8E\x8F\a\v\x2\x2\x8F\x90\a\f\x2\x2\x90\x92");
        sb.Append("\x5$\x13\x2\x91\x93\x5 \x11\x2\x92\x91\x3\x2\x2\x2\x92\x93\x3");
        sb.Append("\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x95\x5\b\x5\x2\x95\x1B\x3");
        sb.Append("\x2\x2\x2\x96\x97\a\r\x2\x2\x97\x98\x5\x1E\x10\x2\x98\x99\a");
        sb.Append("\f\x2\x2\x99\x9B\x5$\x13\x2\x9A\x9C\x5 \x11\x2\x9B\x9A\x3\x2");
        sb.Append("\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x5\b");
        sb.Append("\x5\x2\x9E\x1D\x3\x2\x2\x2\x9F\xA0\a\x15\x2\x2\xA0\x1F\x3\x2");
        sb.Append("\x2\x2\xA1\xA3\x5\"\x12\x2\xA2\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2");
        sb.Append("\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5!\x3\x2\x2");
        sb.Append("\x2\xA6\xA7\a\xE\x2\x2\xA7\xA8\a\x15\x2\x2\xA8\xA9\a\b\x2\x2");
        sb.Append("\xA9\xB3\x5.\x18\x2\xAA\xAB\a\xE\x2\x2\xAB\xB3\a\x15\x2\x2\xAC");
        sb.Append("\xAD\a\xE\x2\x2\xAD\xAE\a\x15\x2\x2\xAE\xAF\a\t\x2\x2\xAF\xB0");
        sb.Append("\x5\x16\f\x2\xB0\xB1\a\n\x2\x2\xB1\xB3\x3\x2\x2\x2\xB2\xA6\x3");
        sb.Append("\x2\x2\x2\xB2\xAA\x3\x2\x2\x2\xB2\xAC\x3\x2\x2\x2\xB3#\x3\x2");
        sb.Append("\x2\x2\xB4\xB5\x5\x34\x1B\x2\xB5%\x3\x2\x2\x2\xB6\xB7\a\t\x2");
        sb.Append("\x2\xB7\xBC\x5(\x15\x2\xB8\xB9\a\x4\x2\x2\xB9\xBB\x5(\x15\x2");
        sb.Append("\xBA\xB8\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2");
        sb.Append("\xBC\xBD\x3\x2\x2\x2\xBD\xBF\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2");
        sb.Append("\xBF\xC0\a\n\x2\x2\xC0\'\x3\x2\x2\x2\xC1\xC2\x5*\x16\x2\xC2");
        sb.Append("\xC3\a\b\x2\x2\xC3\xC5\x5\x32\x1A\x2\xC4\xC6\x5,\x17\x2\xC5");
        sb.Append("\xC4\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6)\x3\x2\x2\x2\xC7\xC8");
        sb.Append("\a\xF\x2\x2\xC8\xC9\a\x15\x2\x2\xC9+\x3\x2\x2\x2\xCA\xCB\a\x10");
        sb.Append("\x2\x2\xCB\xCC\x5\x30\x19\x2\xCC-\x3\x2\x2\x2\xCD\xD0\x5\x30");
        sb.Append("\x19\x2\xCE\xD0\x5*\x16\x2\xCF\xCD\x3\x2\x2\x2\xCF\xCE\x3\x2");
        sb.Append("\x2\x2\xD0/\x3\x2\x2\x2\xD1\xD8\a\x16\x2\x2\xD2\xD8\a\x17\x2");
        sb.Append("\x2\xD3\xD8\a\x14\x2\x2\xD4\xD8\x5:\x1E\x2\xD5\xD8\x5<\x1F\x2");
        sb.Append("\xD6\xD8\a\x15\x2\x2\xD7\xD1\x3\x2\x2\x2\xD7\xD2\x3\x2\x2\x2");
        sb.Append("\xD7\xD3\x3\x2\x2\x2\xD7\xD4\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2");
        sb.Append("\xD7\xD6\x3\x2\x2\x2\xD8\x31\x3\x2\x2\x2\xD9\xDB\x5\x34\x1B");
        sb.Append("\x2\xDA\xDC\x5\x38\x1D\x2\xDB\xDA\x3\x2\x2\x2\xDB\xDC\x3\x2");
        sb.Append("\x2\x2\xDC\xE2\x3\x2\x2\x2\xDD\xDF\x5\x36\x1C\x2\xDE\xE0\x5");
        sb.Append("\x38\x1D\x2\xDF\xDE\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE2");
        sb.Append("\x3\x2\x2\x2\xE1\xD9\x3\x2\x2\x2\xE1\xDD\x3\x2\x2\x2\xE2\x33");
        sb.Append("\x3\x2\x2\x2\xE3\xE4\a\x15\x2\x2\xE4\x35\x3\x2\x2\x2\xE5\xE6");
        sb.Append("\a\x11\x2\x2\xE6\xE7\x5\x32\x1A\x2\xE7\xE8\a\x12\x2\x2\xE8\x37");
        sb.Append("\x3\x2\x2\x2\xE9\xEA\a\x13\x2\x2\xEA\x39\x3\x2\x2\x2\xEB\xEC");
        sb.Append("\a\x11\x2\x2\xEC\xF1\x5\x30\x19\x2\xED\xEE\a\x4\x2\x2\xEE\xF0");
        sb.Append("\x5\x30\x19\x2\xEF\xED\x3\x2\x2\x2\xF0\xF3\x3\x2\x2\x2\xF1\xEF");
        sb.Append("\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF4\x3\x2\x2\x2\xF3\xF1");
        sb.Append("\x3\x2\x2\x2\xF4\xF5\a\x12\x2\x2\xF5\xF9\x3\x2\x2\x2\xF6\xF7");
        sb.Append("\a\x11\x2\x2\xF7\xF9\a\x12\x2\x2\xF8\xEB\x3\x2\x2\x2\xF8\xF6");
        sb.Append("\x3\x2\x2\x2\xF9;\x3\x2\x2\x2\xFA\xFB\a\x3\x2\x2\xFB\xFC\a\x15");
        sb.Append("\x2\x2\xFC\xFD\a\b\x2\x2\xFD\x104\x5\x30\x19\x2\xFE\xFF\a\x4");
        sb.Append("\x2\x2\xFF\x100\a\x15\x2\x2\x100\x101\a\b\x2\x2\x101\x103\x5");
        sb.Append("\x30\x19\x2\x102\xFE\x3\x2\x2\x2\x103\x106\x3\x2\x2\x2\x104");
        sb.Append("\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x107\x3\x2\x2\x2");
        sb.Append("\x106\x104\x3\x2\x2\x2\x107\x108\a\x5\x2\x2\x108=\x3\x2\x2\x2");
        sb.Append("\x1E\x41\x45KNRW\\\x66jmpt\x80\x8C\x92\x9B\xA4\xB2\xBC\xC5\xCF");
        sb.Append("\xD7\xDB\xDF\xE1\xF1\xF8\x104");
        return sb.ToString();
    }

    public static readonly ATN _ATN =
        new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
