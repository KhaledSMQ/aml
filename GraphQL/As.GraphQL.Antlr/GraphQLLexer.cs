//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\colin\Documents\GitHub\AS2017B\AS2017B\src\AS.GraphQL\GraphQL.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace GraphQL
{
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
    public partial class GraphQLLexer : Lexer {
        protected static DFA[] decisionToDFA;
        protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
        public const int
            T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
            T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
            BOOLEAN=18, NAME=19, STRING=20, NUMBER=21, WS=22, COMMENT=23;
        public static string[] modeNames = {
            "DEFAULT_MODE"
        };

        public static readonly string[] ruleNames = {
            "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
            "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
            "BOOLEAN", "NAME", "STRING", "ESC", "UNICODE", "HEX", "NUMBER", "INT", 
            "EXP", "WS", "COMMENT"
        };


        public GraphQLLexer(ICharStream input)
            : base(input)
        {
            Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
        }

        private static readonly string[] _LiteralNames = {
            null, "'{'", "','", "'}'", "'query'", "'mutation'", "':'", "'('", "')'", 
            "'...'", "'on'", "'fragment'", "'@'", "'$'", "'='", "'['", "']'", "'!'"
        };
        private static readonly string[] _SymbolicNames = {
            null, null, null, null, null, null, null, null, null, null, null, null, 
            null, null, null, null, null, null, "BOOLEAN", "NAME", "STRING", "NUMBER", 
            "WS", "COMMENT"
        };
        public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

        [NotNull]
        public override IVocabulary Vocabulary
        {
            get
            {
                return DefaultVocabulary;
            }
        }

        public override string GrammarFileName { get { return "GraphQL.g4"; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string[] ModeNames { get { return modeNames; } }

        public override string SerializedAtn { get { return _serializedATN; } }

        static GraphQLLexer() {
            decisionToDFA = new DFA[_ATN.NumberOfDecisions];
            for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
                decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
            }
        }
        private static string _serializedATN = _serializeATN();
        private static string _serializeATN()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x19");
            sb.Append("\xD2\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
            sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
            sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
            sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
            sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
            sb.Append("\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x3\x2\x3\x3\x3\x3\x3");
            sb.Append("\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3");
            sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b");
            sb.Append("\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f");
            sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3");
            sb.Append("\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13");
            sb.Append("\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13|\n");
            sb.Append("\x13\x3\x14\x3\x14\a\x14\x80\n\x14\f\x14\xE\x14\x83\v\x14\x3");
            sb.Append("\x15\x3\x15\x3\x15\a\x15\x88\n\x15\f\x15\xE\x15\x8B\v\x15\x3");
            sb.Append("\x15\x3\x15\x3\x16\x3\x16\x3\x16\x5\x16\x92\n\x16\x3\x17\x3");
            sb.Append("\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x5\x19");
            sb.Append("\x9D\n\x19\x3\x19\x3\x19\x3\x19\x6\x19\xA2\n\x19\r\x19\xE\x19");
            sb.Append("\xA3\x3\x19\x5\x19\xA7\n\x19\x3\x19\x5\x19\xAA\n\x19\x3\x19");
            sb.Append("\x3\x19\x3\x19\x3\x19\x5\x19\xB0\n\x19\x3\x19\x5\x19\xB3\n\x19");
            sb.Append("\x3\x1A\x3\x1A\x3\x1A\a\x1A\xB8\n\x1A\f\x1A\xE\x1A\xBB\v\x1A");
            sb.Append("\x5\x1A\xBD\n\x1A\x3\x1B\x3\x1B\x5\x1B\xC1\n\x1B\x3\x1B\x3\x1B");
            sb.Append("\x3\x1C\x6\x1C\xC6\n\x1C\r\x1C\xE\x1C\xC7\x3\x1C\x3\x1C\x3\x1D");
            sb.Append("\x3\x1D\a\x1D\xCE\n\x1D\f\x1D\xE\x1D\xD1\v\x1D\x2\x2\x1E\x3");
            sb.Append("\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19");
            sb.Append("\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x2-\x2");
            sb.Append("/\x2\x31\x17\x33\x2\x35\x2\x37\x18\x39\x19\x3\x2\r\x5\x2\x43");
            sb.Append("\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2$$^^\n\x2");
            sb.Append("$$\x31\x31^^\x64\x64hhppttvv\x5\x2\x32;\x43H\x63h\x3\x2\x32");
            sb.Append(";\x3\x2\x33;\x4\x2GGgg\x4\x2--//\x5\x2\v\f\xF\xF\"\"\x4\x2\f");
            sb.Append("\f\xF\xF\xDD\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2");
            sb.Append("\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2");
            sb.Append("\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15");
            sb.Append("\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3");
            sb.Append("\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2");
            sb.Append("\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3");
            sb.Append("\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2");
            sb.Append("\x2\x2\x3;\x3\x2\x2\x2\x5=\x3\x2\x2\x2\a?\x3\x2\x2\x2\t\x41");
            sb.Append("\x3\x2\x2\x2\vG\x3\x2\x2\x2\rP\x3\x2\x2\x2\xFR\x3\x2\x2\x2\x11");
            sb.Append("T\x3\x2\x2\x2\x13V\x3\x2\x2\x2\x15Z\x3\x2\x2\x2\x17]\x3\x2\x2");
            sb.Append("\x2\x19\x66\x3\x2\x2\x2\x1Bh\x3\x2\x2\x2\x1Dj\x3\x2\x2\x2\x1F");
            sb.Append("l\x3\x2\x2\x2!n\x3\x2\x2\x2#p\x3\x2\x2\x2%{\x3\x2\x2\x2\'}\x3");
            sb.Append("\x2\x2\x2)\x84\x3\x2\x2\x2+\x8E\x3\x2\x2\x2-\x93\x3\x2\x2\x2");
            sb.Append("/\x99\x3\x2\x2\x2\x31\xB2\x3\x2\x2\x2\x33\xBC\x3\x2\x2\x2\x35");
            sb.Append("\xBE\x3\x2\x2\x2\x37\xC5\x3\x2\x2\x2\x39\xCB\x3\x2\x2\x2;<\a");
            sb.Append("}\x2\x2<\x4\x3\x2\x2\x2=>\a.\x2\x2>\x6\x3\x2\x2\x2?@\a\x7F\x2");
            sb.Append("\x2@\b\x3\x2\x2\x2\x41\x42\as\x2\x2\x42\x43\aw\x2\x2\x43\x44");
            sb.Append("\ag\x2\x2\x44\x45\at\x2\x2\x45\x46\a{\x2\x2\x46\n\x3\x2\x2\x2");
            sb.Append("GH\ao\x2\x2HI\aw\x2\x2IJ\av\x2\x2JK\a\x63\x2\x2KL\av\x2\x2L");
            sb.Append("M\ak\x2\x2MN\aq\x2\x2NO\ap\x2\x2O\f\x3\x2\x2\x2PQ\a<\x2\x2Q");
            sb.Append("\xE\x3\x2\x2\x2RS\a*\x2\x2S\x10\x3\x2\x2\x2TU\a+\x2\x2U\x12");
            sb.Append("\x3\x2\x2\x2VW\a\x30\x2\x2WX\a\x30\x2\x2XY\a\x30\x2\x2Y\x14");
            sb.Append("\x3\x2\x2\x2Z[\aq\x2\x2[\\\ap\x2\x2\\\x16\x3\x2\x2\x2]^\ah\x2");
            sb.Append("\x2^_\at\x2\x2_`\a\x63\x2\x2`\x61\ai\x2\x2\x61\x62\ao\x2\x2");
            sb.Append("\x62\x63\ag\x2\x2\x63\x64\ap\x2\x2\x64\x65\av\x2\x2\x65\x18");
            sb.Append("\x3\x2\x2\x2\x66g\a\x42\x2\x2g\x1A\x3\x2\x2\x2hi\a&\x2\x2i\x1C");
            sb.Append("\x3\x2\x2\x2jk\a?\x2\x2k\x1E\x3\x2\x2\x2lm\a]\x2\x2m \x3\x2");
            sb.Append("\x2\x2no\a_\x2\x2o\"\x3\x2\x2\x2pq\a#\x2\x2q$\x3\x2\x2\x2rs");
            sb.Append("\av\x2\x2st\at\x2\x2tu\aw\x2\x2u|\ag\x2\x2vw\ah\x2\x2wx\a\x63");
            sb.Append("\x2\x2xy\an\x2\x2yz\au\x2\x2z|\ag\x2\x2{r\x3\x2\x2\x2{v\x3\x2");
            sb.Append("\x2\x2|&\x3\x2\x2\x2}\x81\t\x2\x2\x2~\x80\t\x3\x2\x2\x7F~\x3");
            sb.Append("\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81\x82\x3");
            sb.Append("\x2\x2\x2\x82(\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x84\x89\a$\x2");
            sb.Append("\x2\x85\x88\x5+\x16\x2\x86\x88\n\x4\x2\x2\x87\x85\x3\x2\x2\x2");
            sb.Append("\x87\x86\x3\x2\x2\x2\x88\x8B\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2");
            sb.Append("\x89\x8A\x3\x2\x2\x2\x8A\x8C\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2");
            sb.Append("\x8C\x8D\a$\x2\x2\x8D*\x3\x2\x2\x2\x8E\x91\a^\x2\x2\x8F\x92");
            sb.Append("\t\x5\x2\x2\x90\x92\x5-\x17\x2\x91\x8F\x3\x2\x2\x2\x91\x90\x3");
            sb.Append("\x2\x2\x2\x92,\x3\x2\x2\x2\x93\x94\aw\x2\x2\x94\x95\x5/\x18");
            sb.Append("\x2\x95\x96\x5/\x18\x2\x96\x97\x5/\x18\x2\x97\x98\x5/\x18\x2");
            sb.Append("\x98.\x3\x2\x2\x2\x99\x9A\t\x6\x2\x2\x9A\x30\x3\x2\x2\x2\x9B");
            sb.Append("\x9D\a/\x2\x2\x9C\x9B\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E");
            sb.Append("\x3\x2\x2\x2\x9E\x9F\x5\x33\x1A\x2\x9F\xA1\a\x30\x2\x2\xA0\xA2");
            sb.Append("\t\a\x2\x2\xA1\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA1\x3");
            sb.Append("\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\xA7\x5");
            sb.Append("\x35\x1B\x2\xA6\xA5\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xB3");
            sb.Append("\x3\x2\x2\x2\xA8\xAA\a/\x2\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3");
            sb.Append("\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\x5\x33\x1A\x2\xAC\xAD");
            sb.Append("\x5\x35\x1B\x2\xAD\xB3\x3\x2\x2\x2\xAE\xB0\a/\x2\x2\xAF\xAE");
            sb.Append("\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB3");
            sb.Append("\x5\x33\x1A\x2\xB2\x9C\x3\x2\x2\x2\xB2\xA9\x3\x2\x2\x2\xB2\xAF");
            sb.Append("\x3\x2\x2\x2\xB3\x32\x3\x2\x2\x2\xB4\xBD\a\x32\x2\x2\xB5\xB9");
            sb.Append("\t\b\x2\x2\xB6\xB8\t\a\x2\x2\xB7\xB6\x3\x2\x2\x2\xB8\xBB\x3");
            sb.Append("\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBD\x3");
            sb.Append("\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xB4\x3\x2\x2\x2\xBC\xB5\x3");
            sb.Append("\x2\x2\x2\xBD\x34\x3\x2\x2\x2\xBE\xC0\t\t\x2\x2\xBF\xC1\t\n");
            sb.Append("\x2\x2\xC0\xBF\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\x3\x2");
            sb.Append("\x2\x2\xC2\xC3\x5\x33\x1A\x2\xC3\x36\x3\x2\x2\x2\xC4\xC6\t\v");
            sb.Append("\x2\x2\xC5\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC5\x3\x2");
            sb.Append("\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCA\b\x1C");
            sb.Append("\x2\x2\xCA\x38\x3\x2\x2\x2\xCB\xCF\a%\x2\x2\xCC\xCE\n\f\x2\x2");
            sb.Append("\xCD\xCC\x3\x2\x2\x2\xCE\xD1\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2");
            sb.Append("\xCF\xD0\x3\x2\x2\x2\xD0:\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\x13");
            sb.Append("\x2{\x81\x87\x89\x91\x9C\xA3\xA6\xA9\xAF\xB2\xB9\xBC\xC0\xC7");
            sb.Append("\xCF\x3\b\x2\x2");
            return sb.ToString();
        }

        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


    }
}
