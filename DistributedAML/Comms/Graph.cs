// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Graph.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Graph.proto</summary>
public static partial class GraphReflection {

  #region Descriptor
  /// <summary>File descriptor for Graph.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GraphReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtHcmFwaC5wcm90byKYAQoGRmlsdGVyEgwKBE5hbWUYASABKAkSHQoJcHJl",
          "ZGljYXRlGAIgASgOMgouUHJlZGljYXRlEhUKC1N0cmluZ1ZhbHVlGAMgASgJ",
          "SAASEgoISW50VmFsdWUYBCABKANIABIWCgxCb29sZWFuVmFsdWUYBSABKAhI",
          "ABIVCgtEb3VibGVWYWx1ZRgGIAEoAUgAQgcKBVF1ZXJ5IlEKCkdyYXBoUXVl",
          "cnkSDAoETmFtZRgBIAEoCRIYCgdGaWx0ZXJzGAIgAygLMgcuRmlsdGVyEhsK",
          "BkZpZWxkcxgDIAMoCzILLkdyYXBoUXVlcnkipQEKC0dyYXBoUmVzdWx0EgwK",
          "BE5hbWUYASABKAkSFQoLU3RyaW5nVmFsdWUYAyABKAlIABISCghJbnRWYWx1",
          "ZRgEIAEoA0gAEhYKDEJvb2xlYW5WYWx1ZRgFIAEoCEgAEhUKC0RvdWJsZVZh",
          "bHVlGAYgASgBSAASHwoJTGlzdFZhbHVlGAcgAygLMgwuR3JhcGhSZXN1bHRC",
          "DQoLU2ltcGxlVmFsdWUiLgoNR3JhcGhSZXNwb25zZRIdCgdSZXN1bHRzGAEg",
          "AygLMgwuR3JhcGhSZXN1bHQqYQoJUHJlZGljYXRlEgoKBkVxdWFscxAAEg8K",
          "C0dyZWF0ZXJUaGFuEAESDAoITGVzc1RoYW4QAhIVChFHcmVhdGVyVGhhbkVx",
          "dWFscxADEhIKDkxlc3NUaGFuRXF1YWxzEARiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Predicate), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Filter), global::Filter.Parser, new[]{ "Name", "Predicate", "StringValue", "IntValue", "BooleanValue", "DoubleValue" }, new[]{ "Query" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GraphQuery), global::GraphQuery.Parser, new[]{ "Name", "Filters", "Fields" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GraphResult), global::GraphResult.Parser, new[]{ "Name", "StringValue", "IntValue", "BooleanValue", "DoubleValue", "ListValue" }, new[]{ "SimpleValue" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GraphResponse), global::GraphResponse.Parser, new[]{ "Results" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum Predicate {
  [pbr::OriginalName("Equals")] Equals = 0,
  [pbr::OriginalName("GreaterThan")] GreaterThan = 1,
  [pbr::OriginalName("LessThan")] LessThan = 2,
  [pbr::OriginalName("GreaterThanEquals")] GreaterThanEquals = 3,
  [pbr::OriginalName("LessThanEquals")] LessThanEquals = 4,
}

#endregion

#region Messages
public sealed partial class Filter : pb::IMessage<Filter> {
  private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Filter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GraphReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Filter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Filter(Filter other) : this() {
    name_ = other.name_;
    predicate_ = other.predicate_;
    switch (other.QueryCase) {
      case QueryOneofCase.StringValue:
        StringValue = other.StringValue;
        break;
      case QueryOneofCase.IntValue:
        IntValue = other.IntValue;
        break;
      case QueryOneofCase.BooleanValue:
        BooleanValue = other.BooleanValue;
        break;
      case QueryOneofCase.DoubleValue:
        DoubleValue = other.DoubleValue;
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Filter Clone() {
    return new Filter(this);
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "predicate" field.</summary>
  public const int PredicateFieldNumber = 2;
  private global::Predicate predicate_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Predicate Predicate {
    get { return predicate_; }
    set {
      predicate_ = value;
    }
  }

  /// <summary>Field number for the "StringValue" field.</summary>
  public const int StringValueFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StringValue {
    get { return queryCase_ == QueryOneofCase.StringValue ? (string) query_ : ""; }
    set {
      query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      queryCase_ = QueryOneofCase.StringValue;
    }
  }

  /// <summary>Field number for the "IntValue" field.</summary>
  public const int IntValueFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long IntValue {
    get { return queryCase_ == QueryOneofCase.IntValue ? (long) query_ : 0L; }
    set {
      query_ = value;
      queryCase_ = QueryOneofCase.IntValue;
    }
  }

  /// <summary>Field number for the "BooleanValue" field.</summary>
  public const int BooleanValueFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool BooleanValue {
    get { return queryCase_ == QueryOneofCase.BooleanValue ? (bool) query_ : false; }
    set {
      query_ = value;
      queryCase_ = QueryOneofCase.BooleanValue;
    }
  }

  /// <summary>Field number for the "DoubleValue" field.</summary>
  public const int DoubleValueFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double DoubleValue {
    get { return queryCase_ == QueryOneofCase.DoubleValue ? (double) query_ : 0D; }
    set {
      query_ = value;
      queryCase_ = QueryOneofCase.DoubleValue;
    }
  }

  private object query_;
  /// <summary>Enum of possible cases for the "Query" oneof.</summary>
  public enum QueryOneofCase {
    None = 0,
    StringValue = 3,
    IntValue = 4,
    BooleanValue = 5,
    DoubleValue = 6,
  }
  private QueryOneofCase queryCase_ = QueryOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryOneofCase QueryCase {
    get { return queryCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearQuery() {
    queryCase_ = QueryOneofCase.None;
    query_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Filter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Filter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Predicate != other.Predicate) return false;
    if (StringValue != other.StringValue) return false;
    if (IntValue != other.IntValue) return false;
    if (BooleanValue != other.BooleanValue) return false;
    if (DoubleValue != other.DoubleValue) return false;
    if (QueryCase != other.QueryCase) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Predicate != 0) hash ^= Predicate.GetHashCode();
    if (queryCase_ == QueryOneofCase.StringValue) hash ^= StringValue.GetHashCode();
    if (queryCase_ == QueryOneofCase.IntValue) hash ^= IntValue.GetHashCode();
    if (queryCase_ == QueryOneofCase.BooleanValue) hash ^= BooleanValue.GetHashCode();
    if (queryCase_ == QueryOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
    hash ^= (int) queryCase_;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Predicate != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Predicate);
    }
    if (queryCase_ == QueryOneofCase.StringValue) {
      output.WriteRawTag(26);
      output.WriteString(StringValue);
    }
    if (queryCase_ == QueryOneofCase.IntValue) {
      output.WriteRawTag(32);
      output.WriteInt64(IntValue);
    }
    if (queryCase_ == QueryOneofCase.BooleanValue) {
      output.WriteRawTag(40);
      output.WriteBool(BooleanValue);
    }
    if (queryCase_ == QueryOneofCase.DoubleValue) {
      output.WriteRawTag(49);
      output.WriteDouble(DoubleValue);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Predicate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Predicate);
    }
    if (queryCase_ == QueryOneofCase.StringValue) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
    }
    if (queryCase_ == QueryOneofCase.IntValue) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
    }
    if (queryCase_ == QueryOneofCase.BooleanValue) {
      size += 1 + 1;
    }
    if (queryCase_ == QueryOneofCase.DoubleValue) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Filter other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Predicate != 0) {
      Predicate = other.Predicate;
    }
    switch (other.QueryCase) {
      case QueryOneofCase.StringValue:
        StringValue = other.StringValue;
        break;
      case QueryOneofCase.IntValue:
        IntValue = other.IntValue;
        break;
      case QueryOneofCase.BooleanValue:
        BooleanValue = other.BooleanValue;
        break;
      case QueryOneofCase.DoubleValue:
        DoubleValue = other.DoubleValue;
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          predicate_ = (global::Predicate) input.ReadEnum();
          break;
        }
        case 26: {
          StringValue = input.ReadString();
          break;
        }
        case 32: {
          IntValue = input.ReadInt64();
          break;
        }
        case 40: {
          BooleanValue = input.ReadBool();
          break;
        }
        case 49: {
          DoubleValue = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class GraphQuery : pb::IMessage<GraphQuery> {
  private static readonly pb::MessageParser<GraphQuery> _parser = new pb::MessageParser<GraphQuery>(() => new GraphQuery());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GraphQuery> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GraphReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphQuery() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphQuery(GraphQuery other) : this() {
    name_ = other.name_;
    filters_ = other.filters_.Clone();
    fields_ = other.fields_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphQuery Clone() {
    return new GraphQuery(this);
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Filters" field.</summary>
  public const int FiltersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Filter> _repeated_filters_codec
      = pb::FieldCodec.ForMessage(18, global::Filter.Parser);
  private readonly pbc::RepeatedField<global::Filter> filters_ = new pbc::RepeatedField<global::Filter>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Filter> Filters {
    get { return filters_; }
  }

  /// <summary>Field number for the "Fields" field.</summary>
  public const int FieldsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::GraphQuery> _repeated_fields_codec
      = pb::FieldCodec.ForMessage(26, global::GraphQuery.Parser);
  private readonly pbc::RepeatedField<global::GraphQuery> fields_ = new pbc::RepeatedField<global::GraphQuery>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GraphQuery> Fields {
    get { return fields_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GraphQuery);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GraphQuery other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if(!filters_.Equals(other.filters_)) return false;
    if(!fields_.Equals(other.fields_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= filters_.GetHashCode();
    hash ^= fields_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    filters_.WriteTo(output, _repeated_filters_codec);
    fields_.WriteTo(output, _repeated_fields_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += filters_.CalculateSize(_repeated_filters_codec);
    size += fields_.CalculateSize(_repeated_fields_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GraphQuery other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    filters_.Add(other.filters_);
    fields_.Add(other.fields_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          filters_.AddEntriesFrom(input, _repeated_filters_codec);
          break;
        }
        case 26: {
          fields_.AddEntriesFrom(input, _repeated_fields_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GraphResult : pb::IMessage<GraphResult> {
  private static readonly pb::MessageParser<GraphResult> _parser = new pb::MessageParser<GraphResult>(() => new GraphResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GraphResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GraphReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResult(GraphResult other) : this() {
    name_ = other.name_;
    listValue_ = other.listValue_.Clone();
    switch (other.SimpleValueCase) {
      case SimpleValueOneofCase.StringValue:
        StringValue = other.StringValue;
        break;
      case SimpleValueOneofCase.IntValue:
        IntValue = other.IntValue;
        break;
      case SimpleValueOneofCase.BooleanValue:
        BooleanValue = other.BooleanValue;
        break;
      case SimpleValueOneofCase.DoubleValue:
        DoubleValue = other.DoubleValue;
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResult Clone() {
    return new GraphResult(this);
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "StringValue" field.</summary>
  public const int StringValueFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StringValue {
    get { return simpleValueCase_ == SimpleValueOneofCase.StringValue ? (string) simpleValue_ : ""; }
    set {
      simpleValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      simpleValueCase_ = SimpleValueOneofCase.StringValue;
    }
  }

  /// <summary>Field number for the "IntValue" field.</summary>
  public const int IntValueFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long IntValue {
    get { return simpleValueCase_ == SimpleValueOneofCase.IntValue ? (long) simpleValue_ : 0L; }
    set {
      simpleValue_ = value;
      simpleValueCase_ = SimpleValueOneofCase.IntValue;
    }
  }

  /// <summary>Field number for the "BooleanValue" field.</summary>
  public const int BooleanValueFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool BooleanValue {
    get { return simpleValueCase_ == SimpleValueOneofCase.BooleanValue ? (bool) simpleValue_ : false; }
    set {
      simpleValue_ = value;
      simpleValueCase_ = SimpleValueOneofCase.BooleanValue;
    }
  }

  /// <summary>Field number for the "DoubleValue" field.</summary>
  public const int DoubleValueFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double DoubleValue {
    get { return simpleValueCase_ == SimpleValueOneofCase.DoubleValue ? (double) simpleValue_ : 0D; }
    set {
      simpleValue_ = value;
      simpleValueCase_ = SimpleValueOneofCase.DoubleValue;
    }
  }

  /// <summary>Field number for the "ListValue" field.</summary>
  public const int ListValueFieldNumber = 7;
  private static readonly pb::FieldCodec<global::GraphResult> _repeated_listValue_codec
      = pb::FieldCodec.ForMessage(58, global::GraphResult.Parser);
  private readonly pbc::RepeatedField<global::GraphResult> listValue_ = new pbc::RepeatedField<global::GraphResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GraphResult> ListValue {
    get { return listValue_; }
  }

  private object simpleValue_;
  /// <summary>Enum of possible cases for the "SimpleValue" oneof.</summary>
  public enum SimpleValueOneofCase {
    None = 0,
    StringValue = 3,
    IntValue = 4,
    BooleanValue = 5,
    DoubleValue = 6,
  }
  private SimpleValueOneofCase simpleValueCase_ = SimpleValueOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SimpleValueOneofCase SimpleValueCase {
    get { return simpleValueCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSimpleValue() {
    simpleValueCase_ = SimpleValueOneofCase.None;
    simpleValue_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GraphResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GraphResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (StringValue != other.StringValue) return false;
    if (IntValue != other.IntValue) return false;
    if (BooleanValue != other.BooleanValue) return false;
    if (DoubleValue != other.DoubleValue) return false;
    if(!listValue_.Equals(other.listValue_)) return false;
    if (SimpleValueCase != other.SimpleValueCase) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (simpleValueCase_ == SimpleValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
    if (simpleValueCase_ == SimpleValueOneofCase.IntValue) hash ^= IntValue.GetHashCode();
    if (simpleValueCase_ == SimpleValueOneofCase.BooleanValue) hash ^= BooleanValue.GetHashCode();
    if (simpleValueCase_ == SimpleValueOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
    hash ^= listValue_.GetHashCode();
    hash ^= (int) simpleValueCase_;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (simpleValueCase_ == SimpleValueOneofCase.StringValue) {
      output.WriteRawTag(26);
      output.WriteString(StringValue);
    }
    if (simpleValueCase_ == SimpleValueOneofCase.IntValue) {
      output.WriteRawTag(32);
      output.WriteInt64(IntValue);
    }
    if (simpleValueCase_ == SimpleValueOneofCase.BooleanValue) {
      output.WriteRawTag(40);
      output.WriteBool(BooleanValue);
    }
    if (simpleValueCase_ == SimpleValueOneofCase.DoubleValue) {
      output.WriteRawTag(49);
      output.WriteDouble(DoubleValue);
    }
    listValue_.WriteTo(output, _repeated_listValue_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (simpleValueCase_ == SimpleValueOneofCase.StringValue) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
    }
    if (simpleValueCase_ == SimpleValueOneofCase.IntValue) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
    }
    if (simpleValueCase_ == SimpleValueOneofCase.BooleanValue) {
      size += 1 + 1;
    }
    if (simpleValueCase_ == SimpleValueOneofCase.DoubleValue) {
      size += 1 + 8;
    }
    size += listValue_.CalculateSize(_repeated_listValue_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GraphResult other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    listValue_.Add(other.listValue_);
    switch (other.SimpleValueCase) {
      case SimpleValueOneofCase.StringValue:
        StringValue = other.StringValue;
        break;
      case SimpleValueOneofCase.IntValue:
        IntValue = other.IntValue;
        break;
      case SimpleValueOneofCase.BooleanValue:
        BooleanValue = other.BooleanValue;
        break;
      case SimpleValueOneofCase.DoubleValue:
        DoubleValue = other.DoubleValue;
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          StringValue = input.ReadString();
          break;
        }
        case 32: {
          IntValue = input.ReadInt64();
          break;
        }
        case 40: {
          BooleanValue = input.ReadBool();
          break;
        }
        case 49: {
          DoubleValue = input.ReadDouble();
          break;
        }
        case 58: {
          listValue_.AddEntriesFrom(input, _repeated_listValue_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GraphResponse : pb::IMessage<GraphResponse> {
  private static readonly pb::MessageParser<GraphResponse> _parser = new pb::MessageParser<GraphResponse>(() => new GraphResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GraphResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GraphReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResponse(GraphResponse other) : this() {
    results_ = other.results_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResponse Clone() {
    return new GraphResponse(this);
  }

  /// <summary>Field number for the "Results" field.</summary>
  public const int ResultsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GraphResult> _repeated_results_codec
      = pb::FieldCodec.ForMessage(10, global::GraphResult.Parser);
  private readonly pbc::RepeatedField<global::GraphResult> results_ = new pbc::RepeatedField<global::GraphResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GraphResult> Results {
    get { return results_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GraphResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GraphResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!results_.Equals(other.results_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= results_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    results_.WriteTo(output, _repeated_results_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += results_.CalculateSize(_repeated_results_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GraphResponse other) {
    if (other == null) {
      return;
    }
    results_.Add(other.results_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          results_.AddEntriesFrom(input, _repeated_results_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
