// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transaction.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Transaction.proto</summary>
public static partial class TransactionReflection {

  #region Descriptor
  /// <summary>File descriptor for Transaction.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TransactionReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFUcmFuc2FjdGlvbi5wcm90byKkAgoPVHJhbnNhY3Rpb25Sb2xlEg0KBVR4",
          "bklkGAEgASgJEicKBFR5cGUYAiABKA4yGS5UcmFuc2FjdGlvblJvbGUuUm9s",
          "ZVR5cGUSEAoIU29ydENvZGUYAyABKAkSDwoHQWNjb3VudBgEIAEoCRIMCgRO",
          "YW1lGAUgASgJEg8KB0FkZHJlc3MYBiABKAkSEAoISXNQc2V1ZG8YByABKAgS",
          "FQoNSXNGb3VuZERpcmVjdBgIIAEoCBIbChNEaXNjb3ZlcmVkQWNjb3VudElk",
          "GAkgASgJIlEKCFJvbGVUeXBlEg8KC0JlbmVmaWNpYXJ5EAASDgoKT3JpZ2lu",
          "YXRvchABEhEKDUludGVybWVkaWFyeTEQAhIRCg1JbnRlcm1lZGlhcnkyEAMi",
          "nwEKC1RyYW5zYWN0aW9uEgoKAklkGAEgASgJEg4KBkFtb3VudBgCIAEoARIq",
          "CgR0eXBlGAMgASgOMhwuVHJhbnNhY3Rpb24uVHJhbnNhY3Rpb25UeXBlEh8K",
          "BXJvbGVzGAQgAygLMhAuVHJhbnNhY3Rpb25Sb2xlIicKD1RyYW5zYWN0aW9u",
          "VHlwZRIJCgV0eXBlMRAAEgkKBXR5cGUyEAFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TransactionRole), global::TransactionRole.Parser, new[]{ "TxnId", "Type", "SortCode", "Account", "Name", "Address", "IsPseudo", "IsFoundDirect", "DiscoveredAccountId" }, null, new[]{ typeof(global::TransactionRole.Types.RoleType) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Transaction), global::Transaction.Parser, new[]{ "Id", "Amount", "Type", "Roles" }, null, new[]{ typeof(global::Transaction.Types.TransactionType) }, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class TransactionRole : pb::IMessage<TransactionRole> {
  private static readonly pb::MessageParser<TransactionRole> _parser = new pb::MessageParser<TransactionRole>(() => new TransactionRole());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TransactionRole> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransactionRole() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransactionRole(TransactionRole other) : this() {
    txnId_ = other.txnId_;
    type_ = other.type_;
    sortCode_ = other.sortCode_;
    account_ = other.account_;
    name_ = other.name_;
    address_ = other.address_;
    isPseudo_ = other.isPseudo_;
    isFoundDirect_ = other.isFoundDirect_;
    discoveredAccountId_ = other.discoveredAccountId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TransactionRole Clone() {
    return new TransactionRole(this);
  }

  /// <summary>Field number for the "TxnId" field.</summary>
  public const int TxnIdFieldNumber = 1;
  private string txnId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TxnId {
    get { return txnId_; }
    set {
      txnId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::TransactionRole.Types.RoleType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TransactionRole.Types.RoleType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "SortCode" field.</summary>
  public const int SortCodeFieldNumber = 3;
  private string sortCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SortCode {
    get { return sortCode_; }
    set {
      sortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Account" field.</summary>
  public const int AccountFieldNumber = 4;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 5;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Address" field.</summary>
  public const int AddressFieldNumber = 6;
  private string address_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Address {
    get { return address_; }
    set {
      address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "IsPseudo" field.</summary>
  public const int IsPseudoFieldNumber = 7;
  private bool isPseudo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPseudo {
    get { return isPseudo_; }
    set {
      isPseudo_ = value;
    }
  }

  /// <summary>Field number for the "IsFoundDirect" field.</summary>
  public const int IsFoundDirectFieldNumber = 8;
  private bool isFoundDirect_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsFoundDirect {
    get { return isFoundDirect_; }
    set {
      isFoundDirect_ = value;
    }
  }

  /// <summary>Field number for the "DiscoveredAccountId" field.</summary>
  public const int DiscoveredAccountIdFieldNumber = 9;
  private string discoveredAccountId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DiscoveredAccountId {
    get { return discoveredAccountId_; }
    set {
      discoveredAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TransactionRole);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TransactionRole other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TxnId != other.TxnId) return false;
    if (Type != other.Type) return false;
    if (SortCode != other.SortCode) return false;
    if (Account != other.Account) return false;
    if (Name != other.Name) return false;
    if (Address != other.Address) return false;
    if (IsPseudo != other.IsPseudo) return false;
    if (IsFoundDirect != other.IsFoundDirect) return false;
    if (DiscoveredAccountId != other.DiscoveredAccountId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TxnId.Length != 0) hash ^= TxnId.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (SortCode.Length != 0) hash ^= SortCode.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Address.Length != 0) hash ^= Address.GetHashCode();
    if (IsPseudo != false) hash ^= IsPseudo.GetHashCode();
    if (IsFoundDirect != false) hash ^= IsFoundDirect.GetHashCode();
    if (DiscoveredAccountId.Length != 0) hash ^= DiscoveredAccountId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TxnId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(TxnId);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (SortCode.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(SortCode);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Account);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Name);
    }
    if (Address.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Address);
    }
    if (IsPseudo != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsPseudo);
    }
    if (IsFoundDirect != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsFoundDirect);
    }
    if (DiscoveredAccountId.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(DiscoveredAccountId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TxnId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TxnId);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (SortCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SortCode);
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Address.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
    }
    if (IsPseudo != false) {
      size += 1 + 1;
    }
    if (IsFoundDirect != false) {
      size += 1 + 1;
    }
    if (DiscoveredAccountId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscoveredAccountId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TransactionRole other) {
    if (other == null) {
      return;
    }
    if (other.TxnId.Length != 0) {
      TxnId = other.TxnId;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.SortCode.Length != 0) {
      SortCode = other.SortCode;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Address.Length != 0) {
      Address = other.Address;
    }
    if (other.IsPseudo != false) {
      IsPseudo = other.IsPseudo;
    }
    if (other.IsFoundDirect != false) {
      IsFoundDirect = other.IsFoundDirect;
    }
    if (other.DiscoveredAccountId.Length != 0) {
      DiscoveredAccountId = other.DiscoveredAccountId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          TxnId = input.ReadString();
          break;
        }
        case 16: {
          type_ = (global::TransactionRole.Types.RoleType) input.ReadEnum();
          break;
        }
        case 26: {
          SortCode = input.ReadString();
          break;
        }
        case 34: {
          Account = input.ReadString();
          break;
        }
        case 42: {
          Name = input.ReadString();
          break;
        }
        case 50: {
          Address = input.ReadString();
          break;
        }
        case 56: {
          IsPseudo = input.ReadBool();
          break;
        }
        case 64: {
          IsFoundDirect = input.ReadBool();
          break;
        }
        case 74: {
          DiscoveredAccountId = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the TransactionRole message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum RoleType {
      [pbr::OriginalName("Beneficiary")] Beneficiary = 0,
      [pbr::OriginalName("Originator")] Originator = 1,
      [pbr::OriginalName("Intermediary1")] Intermediary1 = 2,
      [pbr::OriginalName("Intermediary2")] Intermediary2 = 3,
    }

  }
  #endregion

}

public sealed partial class Transaction : pb::IMessage<Transaction> {
  private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TransactionReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Transaction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Transaction(Transaction other) : this() {
    id_ = other.id_;
    amount_ = other.amount_;
    type_ = other.type_;
    roles_ = other.roles_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Transaction Clone() {
    return new Transaction(this);
  }

  /// <summary>Field number for the "Id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Amount" field.</summary>
  public const int AmountFieldNumber = 2;
  private double amount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Amount {
    get { return amount_; }
    set {
      amount_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private global::Transaction.Types.TransactionType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Transaction.Types.TransactionType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "roles" field.</summary>
  public const int RolesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::TransactionRole> _repeated_roles_codec
      = pb::FieldCodec.ForMessage(34, global::TransactionRole.Parser);
  private readonly pbc::RepeatedField<global::TransactionRole> roles_ = new pbc::RepeatedField<global::TransactionRole>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TransactionRole> Roles {
    get { return roles_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Transaction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Transaction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Amount != other.Amount) return false;
    if (Type != other.Type) return false;
    if(!roles_.Equals(other.roles_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Amount != 0D) hash ^= Amount.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    hash ^= roles_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Amount != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Amount);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Type);
    }
    roles_.WriteTo(output, _repeated_roles_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Amount != 0D) {
      size += 1 + 8;
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    size += roles_.CalculateSize(_repeated_roles_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Transaction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Amount != 0D) {
      Amount = other.Amount;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    roles_.Add(other.roles_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 17: {
          Amount = input.ReadDouble();
          break;
        }
        case 24: {
          type_ = (global::Transaction.Types.TransactionType) input.ReadEnum();
          break;
        }
        case 34: {
          roles_.AddEntriesFrom(input, _repeated_roles_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Transaction message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TransactionType {
      [pbr::OriginalName("type1")] Type1 = 0,
      [pbr::OriginalName("type2")] Type2 = 1,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
