// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GraphQuery.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from GraphQuery.proto</summary>
public static partial class GraphQueryReflection {

  #region Descriptor
  /// <summary>File descriptor for GraphQuery.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GraphQueryReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBHcmFwaFF1ZXJ5LnByb3RvIlwKCkdyYXBoUXVlcnkSDQoFUXVlcnkYASAB",
          "KAkSFQoNSXNTY2hlbWFRdWVyeRgCIAEoCBIVCg1PcGVyYXRpb25OYW1lGAMg",
          "ASgJEhEKCVZhcmlhYmxlcxgEIAEoCSIhCg1HcmFwaFJlc3BvbnNlEhAKCFJl",
          "c3BvbnNlGAEgASgJYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GraphQuery), global::GraphQuery.Parser, new[]{ "Query", "IsSchemaQuery", "OperationName", "Variables" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GraphResponse), global::GraphResponse.Parser, new[]{ "Response" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class GraphQuery : pb::IMessage<GraphQuery> {
  private static readonly pb::MessageParser<GraphQuery> _parser = new pb::MessageParser<GraphQuery>(() => new GraphQuery());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GraphQuery> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GraphQueryReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphQuery() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphQuery(GraphQuery other) : this() {
    query_ = other.query_;
    isSchemaQuery_ = other.isSchemaQuery_;
    operationName_ = other.operationName_;
    variables_ = other.variables_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphQuery Clone() {
    return new GraphQuery(this);
  }

  /// <summary>Field number for the "Query" field.</summary>
  public const int QueryFieldNumber = 1;
  private string query_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Query {
    get { return query_; }
    set {
      query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "IsSchemaQuery" field.</summary>
  public const int IsSchemaQueryFieldNumber = 2;
  private bool isSchemaQuery_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsSchemaQuery {
    get { return isSchemaQuery_; }
    set {
      isSchemaQuery_ = value;
    }
  }

  /// <summary>Field number for the "OperationName" field.</summary>
  public const int OperationNameFieldNumber = 3;
  private string operationName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OperationName {
    get { return operationName_; }
    set {
      operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Variables" field.</summary>
  public const int VariablesFieldNumber = 4;
  private string variables_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Variables {
    get { return variables_; }
    set {
      variables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GraphQuery);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GraphQuery other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Query != other.Query) return false;
    if (IsSchemaQuery != other.IsSchemaQuery) return false;
    if (OperationName != other.OperationName) return false;
    if (Variables != other.Variables) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Query.Length != 0) hash ^= Query.GetHashCode();
    if (IsSchemaQuery != false) hash ^= IsSchemaQuery.GetHashCode();
    if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
    if (Variables.Length != 0) hash ^= Variables.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Query.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Query);
    }
    if (IsSchemaQuery != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsSchemaQuery);
    }
    if (OperationName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(OperationName);
    }
    if (Variables.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Variables);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Query.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
    }
    if (IsSchemaQuery != false) {
      size += 1 + 1;
    }
    if (OperationName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
    }
    if (Variables.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Variables);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GraphQuery other) {
    if (other == null) {
      return;
    }
    if (other.Query.Length != 0) {
      Query = other.Query;
    }
    if (other.IsSchemaQuery != false) {
      IsSchemaQuery = other.IsSchemaQuery;
    }
    if (other.OperationName.Length != 0) {
      OperationName = other.OperationName;
    }
    if (other.Variables.Length != 0) {
      Variables = other.Variables;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Query = input.ReadString();
          break;
        }
        case 16: {
          IsSchemaQuery = input.ReadBool();
          break;
        }
        case 26: {
          OperationName = input.ReadString();
          break;
        }
        case 34: {
          Variables = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GraphResponse : pb::IMessage<GraphResponse> {
  private static readonly pb::MessageParser<GraphResponse> _parser = new pb::MessageParser<GraphResponse>(() => new GraphResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GraphResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GraphQueryReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResponse(GraphResponse other) : this() {
    response_ = other.response_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GraphResponse Clone() {
    return new GraphResponse(this);
  }

  /// <summary>Field number for the "Response" field.</summary>
  public const int ResponseFieldNumber = 1;
  private string response_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Response {
    get { return response_; }
    set {
      response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GraphResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GraphResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Response != other.Response) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Response.Length != 0) hash ^= Response.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Response.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Response);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Response.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GraphResponse other) {
    if (other == null) {
      return;
    }
    if (other.Response.Length != 0) {
      Response = other.Response;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Response = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
