// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Party.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Party.proto</summary>
public static partial class PartyReflection {

  #region Descriptor
  /// <summary>File descriptor for Party.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PartyReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtQYXJ0eS5wcm90byI0Cg5BY2NvdW50VG9QYXJ0eRIRCglBY2NvdW50SWQY",
          "ASABKAkSDwoHUGFydHlJZBgCIAEoCSIYCgpJZGVudGlmaWVyEgoKAklkGAEg",
          "ASgJIhQKBVllc05vEgsKA1ZhbBgBIAEoCCLnAQoHQWNjb3VudBIKCgJJZBgB",
          "IAEoCRIRCglBY2NvdW50Tm8YAiABKAkSEAoIU29ydENvZGUYAyABKAkSDAoE",
          "SUJBThgEIAEoCRIQCghDdXJyZW5jeRgFIAEoCRIMCgROYW1lGAYgASgJEiIK",
          "BFR5cGUYCiABKA4yFC5BY2NvdW50LkFjY291bnRUeXBlEhcKB1BhcnRpZXMY",
          "ZCADKAsyBi5QYXJ0eSJACgtBY2NvdW50VHlwZRIKCgZWb3N0cm8QABIKCgZS",
          "ZXRhaWwQARINCglDb3Jwb3JhdGUQAhIKCgZQc2V1ZG8QAyLoAwoFUGFydHkS",
          "CgoCSWQYASABKAkSHgoEVHlwZRgCIAEoDjIQLlBhcnR5LlBhcnR5VHlwZRIM",
          "CgROYW1lGAMgASgJEhMKC0NvbXBhbnlOYW1lGAQgASgJEhAKCEFkZHJlc3Mx",
          "GAUgASgJEhAKCEFkZHJlc3MyGAYgASgJEgwKBFRvd24YByABKAkSDwoHQ291",
          "bnRyeRgIIAEoCRIQCghQb3N0Q29kZRgJIAEoCRISCgpUZWxlcGhvbmUxGAog",
          "ASgJEhIKClRlbGVwaG9uZTIYCyABKAkSDQoFRW1haWwYDCABKAkSEgoKV2Vi",
          "QWRkcmVzcxgNIAEoCRISCgpUeG5Qcm9maWxlGA4gASgJEg4KBlNlY3RvchgP",
          "IAEoCRIPCgdDRU9OYW1lGBAgASgJEhAKCENFT0VtYWlsGBEgASgJEg8KB1dl",
          "YnNpdGUYEiABKAkSDAoEQ2l0eRgTIAEoCRISCgpGaVNvcnRDb2RlGBQgASgJ",
          "EhoKCEFjY291bnRzGGQgAygLMgguQWNjb3VudCJaCglQYXJ0eVR5cGUSDAoI",
          "SG9tZUJhbmsQABIKCgZSZXRhaWwQARINCglDb3Jwb3JhdGUQAhIYChRGaW5h",
          "bmNpYWxJbnN0aXR1dGlvbhADEgoKBlBzZXVkbxAEYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountToParty), global::AccountToParty.Parser, new[]{ "AccountId", "PartyId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Identifier), global::Identifier.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::YesNo), global::YesNo.Parser, new[]{ "Val" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Account), global::Account.Parser, new[]{ "Id", "AccountNo", "SortCode", "IBAN", "Currency", "Name", "Type", "Parties" }, null, new[]{ typeof(global::Account.Types.AccountType) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Party), global::Party.Parser, new[]{ "Id", "Type", "Name", "CompanyName", "Address1", "Address2", "Town", "Country", "PostCode", "Telephone1", "Telephone2", "Email", "WebAddress", "TxnProfile", "Sector", "CEOName", "CEOEmail", "Website", "City", "FiSortCode", "Accounts" }, null, new[]{ typeof(global::Party.Types.PartyType) }, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class AccountToParty : pb::IMessage<AccountToParty> {
  private static readonly pb::MessageParser<AccountToParty> _parser = new pb::MessageParser<AccountToParty>(() => new AccountToParty());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountToParty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartyReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountToParty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountToParty(AccountToParty other) : this() {
    accountId_ = other.accountId_;
    partyId_ = other.partyId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountToParty Clone() {
    return new AccountToParty(this);
  }

  /// <summary>Field number for the "AccountId" field.</summary>
  public const int AccountIdFieldNumber = 1;
  private string accountId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccountId {
    get { return accountId_; }
    set {
      accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "PartyId" field.</summary>
  public const int PartyIdFieldNumber = 2;
  private string partyId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PartyId {
    get { return partyId_; }
    set {
      partyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountToParty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountToParty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccountId != other.AccountId) return false;
    if (PartyId != other.PartyId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
    if (PartyId.Length != 0) hash ^= PartyId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AccountId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(AccountId);
    }
    if (PartyId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PartyId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AccountId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
    }
    if (PartyId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PartyId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountToParty other) {
    if (other == null) {
      return;
    }
    if (other.AccountId.Length != 0) {
      AccountId = other.AccountId;
    }
    if (other.PartyId.Length != 0) {
      PartyId = other.PartyId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          AccountId = input.ReadString();
          break;
        }
        case 18: {
          PartyId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Identifier : pb::IMessage<Identifier> {
  private static readonly pb::MessageParser<Identifier> _parser = new pb::MessageParser<Identifier>(() => new Identifier());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Identifier> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartyReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Identifier() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Identifier(Identifier other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Identifier Clone() {
    return new Identifier(this);
  }

  /// <summary>Field number for the "Id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Identifier);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Identifier other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Identifier other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class YesNo : pb::IMessage<YesNo> {
  private static readonly pb::MessageParser<YesNo> _parser = new pb::MessageParser<YesNo>(() => new YesNo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<YesNo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartyReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public YesNo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public YesNo(YesNo other) : this() {
    val_ = other.val_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public YesNo Clone() {
    return new YesNo(this);
  }

  /// <summary>Field number for the "Val" field.</summary>
  public const int ValFieldNumber = 1;
  private bool val_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Val {
    get { return val_; }
    set {
      val_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as YesNo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(YesNo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Val != other.Val) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Val != false) hash ^= Val.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Val != false) {
      output.WriteRawTag(8);
      output.WriteBool(Val);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Val != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(YesNo other) {
    if (other == null) {
      return;
    }
    if (other.Val != false) {
      Val = other.Val;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Val = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class Account : pb::IMessage<Account> {
  private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Account> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartyReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Account() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Account(Account other) : this() {
    id_ = other.id_;
    accountNo_ = other.accountNo_;
    sortCode_ = other.sortCode_;
    iBAN_ = other.iBAN_;
    currency_ = other.currency_;
    name_ = other.name_;
    type_ = other.type_;
    parties_ = other.parties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Account Clone() {
    return new Account(this);
  }

  /// <summary>Field number for the "Id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "AccountNo" field.</summary>
  public const int AccountNoFieldNumber = 2;
  private string accountNo_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccountNo {
    get { return accountNo_; }
    set {
      accountNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "SortCode" field.</summary>
  public const int SortCodeFieldNumber = 3;
  private string sortCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SortCode {
    get { return sortCode_; }
    set {
      sortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "IBAN" field.</summary>
  public const int IBANFieldNumber = 4;
  private string iBAN_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IBAN {
    get { return iBAN_; }
    set {
      iBAN_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Currency" field.</summary>
  public const int CurrencyFieldNumber = 5;
  private string currency_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Currency {
    get { return currency_; }
    set {
      currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 6;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 10;
  private global::Account.Types.AccountType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Account.Types.AccountType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "Parties" field.</summary>
  public const int PartiesFieldNumber = 100;
  private static readonly pb::FieldCodec<global::Party> _repeated_parties_codec
      = pb::FieldCodec.ForMessage(802, global::Party.Parser);
  private readonly pbc::RepeatedField<global::Party> parties_ = new pbc::RepeatedField<global::Party>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Party> Parties {
    get { return parties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Account);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Account other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (AccountNo != other.AccountNo) return false;
    if (SortCode != other.SortCode) return false;
    if (IBAN != other.IBAN) return false;
    if (Currency != other.Currency) return false;
    if (Name != other.Name) return false;
    if (Type != other.Type) return false;
    if(!parties_.Equals(other.parties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (AccountNo.Length != 0) hash ^= AccountNo.GetHashCode();
    if (SortCode.Length != 0) hash ^= SortCode.GetHashCode();
    if (IBAN.Length != 0) hash ^= IBAN.GetHashCode();
    if (Currency.Length != 0) hash ^= Currency.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    hash ^= parties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (AccountNo.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AccountNo);
    }
    if (SortCode.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(SortCode);
    }
    if (IBAN.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(IBAN);
    }
    if (Currency.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Currency);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (Type != 0) {
      output.WriteRawTag(80);
      output.WriteEnum((int) Type);
    }
    parties_.WriteTo(output, _repeated_parties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (AccountNo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountNo);
    }
    if (SortCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SortCode);
    }
    if (IBAN.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IBAN);
    }
    if (Currency.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    size += parties_.CalculateSize(_repeated_parties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Account other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.AccountNo.Length != 0) {
      AccountNo = other.AccountNo;
    }
    if (other.SortCode.Length != 0) {
      SortCode = other.SortCode;
    }
    if (other.IBAN.Length != 0) {
      IBAN = other.IBAN;
    }
    if (other.Currency.Length != 0) {
      Currency = other.Currency;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    parties_.Add(other.parties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          AccountNo = input.ReadString();
          break;
        }
        case 26: {
          SortCode = input.ReadString();
          break;
        }
        case 34: {
          IBAN = input.ReadString();
          break;
        }
        case 42: {
          Currency = input.ReadString();
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 80: {
          type_ = (global::Account.Types.AccountType) input.ReadEnum();
          break;
        }
        case 802: {
          parties_.AddEntriesFrom(input, _repeated_parties_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Account message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum AccountType {
      [pbr::OriginalName("Vostro")] Vostro = 0,
      [pbr::OriginalName("Retail")] Retail = 1,
      [pbr::OriginalName("Corporate")] Corporate = 2,
      [pbr::OriginalName("Pseudo")] Pseudo = 3,
    }

  }
  #endregion

}

public sealed partial class Party : pb::IMessage<Party> {
  private static readonly pb::MessageParser<Party> _parser = new pb::MessageParser<Party>(() => new Party());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Party> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartyReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Party() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Party(Party other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    name_ = other.name_;
    companyName_ = other.companyName_;
    address1_ = other.address1_;
    address2_ = other.address2_;
    town_ = other.town_;
    country_ = other.country_;
    postCode_ = other.postCode_;
    telephone1_ = other.telephone1_;
    telephone2_ = other.telephone2_;
    email_ = other.email_;
    webAddress_ = other.webAddress_;
    txnProfile_ = other.txnProfile_;
    sector_ = other.sector_;
    cEOName_ = other.cEOName_;
    cEOEmail_ = other.cEOEmail_;
    website_ = other.website_;
    city_ = other.city_;
    fiSortCode_ = other.fiSortCode_;
    accounts_ = other.accounts_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Party Clone() {
    return new Party(this);
  }

  /// <summary>Field number for the "Id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::Party.Types.PartyType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Party.Types.PartyType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "CompanyName" field.</summary>
  public const int CompanyNameFieldNumber = 4;
  private string companyName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CompanyName {
    get { return companyName_; }
    set {
      companyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Address1" field.</summary>
  public const int Address1FieldNumber = 5;
  private string address1_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Address1 {
    get { return address1_; }
    set {
      address1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Address2" field.</summary>
  public const int Address2FieldNumber = 6;
  private string address2_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Address2 {
    get { return address2_; }
    set {
      address2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Town" field.</summary>
  public const int TownFieldNumber = 7;
  private string town_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Town {
    get { return town_; }
    set {
      town_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Country" field.</summary>
  public const int CountryFieldNumber = 8;
  private string country_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Country {
    get { return country_; }
    set {
      country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "PostCode" field.</summary>
  public const int PostCodeFieldNumber = 9;
  private string postCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PostCode {
    get { return postCode_; }
    set {
      postCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Telephone1" field.</summary>
  public const int Telephone1FieldNumber = 10;
  private string telephone1_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Telephone1 {
    get { return telephone1_; }
    set {
      telephone1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Telephone2" field.</summary>
  public const int Telephone2FieldNumber = 11;
  private string telephone2_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Telephone2 {
    get { return telephone2_; }
    set {
      telephone2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Email" field.</summary>
  public const int EmailFieldNumber = 12;
  private string email_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Email {
    get { return email_; }
    set {
      email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "WebAddress" field.</summary>
  public const int WebAddressFieldNumber = 13;
  private string webAddress_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WebAddress {
    get { return webAddress_; }
    set {
      webAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TxnProfile" field.</summary>
  public const int TxnProfileFieldNumber = 14;
  private string txnProfile_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TxnProfile {
    get { return txnProfile_; }
    set {
      txnProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Sector" field.</summary>
  public const int SectorFieldNumber = 15;
  private string sector_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sector {
    get { return sector_; }
    set {
      sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "CEOName" field.</summary>
  public const int CEONameFieldNumber = 16;
  private string cEOName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CEOName {
    get { return cEOName_; }
    set {
      cEOName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "CEOEmail" field.</summary>
  public const int CEOEmailFieldNumber = 17;
  private string cEOEmail_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CEOEmail {
    get { return cEOEmail_; }
    set {
      cEOEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Website" field.</summary>
  public const int WebsiteFieldNumber = 18;
  private string website_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Website {
    get { return website_; }
    set {
      website_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "City" field.</summary>
  public const int CityFieldNumber = 19;
  private string city_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string City {
    get { return city_; }
    set {
      city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "FiSortCode" field.</summary>
  public const int FiSortCodeFieldNumber = 20;
  private string fiSortCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FiSortCode {
    get { return fiSortCode_; }
    set {
      fiSortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Accounts" field.</summary>
  public const int AccountsFieldNumber = 100;
  private static readonly pb::FieldCodec<global::Account> _repeated_accounts_codec
      = pb::FieldCodec.ForMessage(802, global::Account.Parser);
  private readonly pbc::RepeatedField<global::Account> accounts_ = new pbc::RepeatedField<global::Account>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Account> Accounts {
    get { return accounts_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Party);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Party other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (Name != other.Name) return false;
    if (CompanyName != other.CompanyName) return false;
    if (Address1 != other.Address1) return false;
    if (Address2 != other.Address2) return false;
    if (Town != other.Town) return false;
    if (Country != other.Country) return false;
    if (PostCode != other.PostCode) return false;
    if (Telephone1 != other.Telephone1) return false;
    if (Telephone2 != other.Telephone2) return false;
    if (Email != other.Email) return false;
    if (WebAddress != other.WebAddress) return false;
    if (TxnProfile != other.TxnProfile) return false;
    if (Sector != other.Sector) return false;
    if (CEOName != other.CEOName) return false;
    if (CEOEmail != other.CEOEmail) return false;
    if (Website != other.Website) return false;
    if (City != other.City) return false;
    if (FiSortCode != other.FiSortCode) return false;
    if(!accounts_.Equals(other.accounts_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (CompanyName.Length != 0) hash ^= CompanyName.GetHashCode();
    if (Address1.Length != 0) hash ^= Address1.GetHashCode();
    if (Address2.Length != 0) hash ^= Address2.GetHashCode();
    if (Town.Length != 0) hash ^= Town.GetHashCode();
    if (Country.Length != 0) hash ^= Country.GetHashCode();
    if (PostCode.Length != 0) hash ^= PostCode.GetHashCode();
    if (Telephone1.Length != 0) hash ^= Telephone1.GetHashCode();
    if (Telephone2.Length != 0) hash ^= Telephone2.GetHashCode();
    if (Email.Length != 0) hash ^= Email.GetHashCode();
    if (WebAddress.Length != 0) hash ^= WebAddress.GetHashCode();
    if (TxnProfile.Length != 0) hash ^= TxnProfile.GetHashCode();
    if (Sector.Length != 0) hash ^= Sector.GetHashCode();
    if (CEOName.Length != 0) hash ^= CEOName.GetHashCode();
    if (CEOEmail.Length != 0) hash ^= CEOEmail.GetHashCode();
    if (Website.Length != 0) hash ^= Website.GetHashCode();
    if (City.Length != 0) hash ^= City.GetHashCode();
    if (FiSortCode.Length != 0) hash ^= FiSortCode.GetHashCode();
    hash ^= accounts_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (CompanyName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(CompanyName);
    }
    if (Address1.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Address1);
    }
    if (Address2.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Address2);
    }
    if (Town.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Town);
    }
    if (Country.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Country);
    }
    if (PostCode.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(PostCode);
    }
    if (Telephone1.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Telephone1);
    }
    if (Telephone2.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Telephone2);
    }
    if (Email.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Email);
    }
    if (WebAddress.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(WebAddress);
    }
    if (TxnProfile.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(TxnProfile);
    }
    if (Sector.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(Sector);
    }
    if (CEOName.Length != 0) {
      output.WriteRawTag(130, 1);
      output.WriteString(CEOName);
    }
    if (CEOEmail.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(CEOEmail);
    }
    if (Website.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(Website);
    }
    if (City.Length != 0) {
      output.WriteRawTag(154, 1);
      output.WriteString(City);
    }
    if (FiSortCode.Length != 0) {
      output.WriteRawTag(162, 1);
      output.WriteString(FiSortCode);
    }
    accounts_.WriteTo(output, _repeated_accounts_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (CompanyName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CompanyName);
    }
    if (Address1.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Address1);
    }
    if (Address2.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Address2);
    }
    if (Town.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Town);
    }
    if (Country.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
    }
    if (PostCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PostCode);
    }
    if (Telephone1.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Telephone1);
    }
    if (Telephone2.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Telephone2);
    }
    if (Email.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
    }
    if (WebAddress.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WebAddress);
    }
    if (TxnProfile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TxnProfile);
    }
    if (Sector.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sector);
    }
    if (CEOName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(CEOName);
    }
    if (CEOEmail.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(CEOEmail);
    }
    if (Website.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Website);
    }
    if (City.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(City);
    }
    if (FiSortCode.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(FiSortCode);
    }
    size += accounts_.CalculateSize(_repeated_accounts_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Party other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.CompanyName.Length != 0) {
      CompanyName = other.CompanyName;
    }
    if (other.Address1.Length != 0) {
      Address1 = other.Address1;
    }
    if (other.Address2.Length != 0) {
      Address2 = other.Address2;
    }
    if (other.Town.Length != 0) {
      Town = other.Town;
    }
    if (other.Country.Length != 0) {
      Country = other.Country;
    }
    if (other.PostCode.Length != 0) {
      PostCode = other.PostCode;
    }
    if (other.Telephone1.Length != 0) {
      Telephone1 = other.Telephone1;
    }
    if (other.Telephone2.Length != 0) {
      Telephone2 = other.Telephone2;
    }
    if (other.Email.Length != 0) {
      Email = other.Email;
    }
    if (other.WebAddress.Length != 0) {
      WebAddress = other.WebAddress;
    }
    if (other.TxnProfile.Length != 0) {
      TxnProfile = other.TxnProfile;
    }
    if (other.Sector.Length != 0) {
      Sector = other.Sector;
    }
    if (other.CEOName.Length != 0) {
      CEOName = other.CEOName;
    }
    if (other.CEOEmail.Length != 0) {
      CEOEmail = other.CEOEmail;
    }
    if (other.Website.Length != 0) {
      Website = other.Website;
    }
    if (other.City.Length != 0) {
      City = other.City;
    }
    if (other.FiSortCode.Length != 0) {
      FiSortCode = other.FiSortCode;
    }
    accounts_.Add(other.accounts_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          type_ = (global::Party.Types.PartyType) input.ReadEnum();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          CompanyName = input.ReadString();
          break;
        }
        case 42: {
          Address1 = input.ReadString();
          break;
        }
        case 50: {
          Address2 = input.ReadString();
          break;
        }
        case 58: {
          Town = input.ReadString();
          break;
        }
        case 66: {
          Country = input.ReadString();
          break;
        }
        case 74: {
          PostCode = input.ReadString();
          break;
        }
        case 82: {
          Telephone1 = input.ReadString();
          break;
        }
        case 90: {
          Telephone2 = input.ReadString();
          break;
        }
        case 98: {
          Email = input.ReadString();
          break;
        }
        case 106: {
          WebAddress = input.ReadString();
          break;
        }
        case 114: {
          TxnProfile = input.ReadString();
          break;
        }
        case 122: {
          Sector = input.ReadString();
          break;
        }
        case 130: {
          CEOName = input.ReadString();
          break;
        }
        case 138: {
          CEOEmail = input.ReadString();
          break;
        }
        case 146: {
          Website = input.ReadString();
          break;
        }
        case 154: {
          City = input.ReadString();
          break;
        }
        case 162: {
          FiSortCode = input.ReadString();
          break;
        }
        case 802: {
          accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Party message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PartyType {
      [pbr::OriginalName("HomeBank")] HomeBank = 0,
      [pbr::OriginalName("Retail")] Retail = 1,
      [pbr::OriginalName("Corporate")] Corporate = 2,
      [pbr::OriginalName("FinancialInstitution")] FinancialInstitution = 3,
      [pbr::OriginalName("Pseudo")] Pseudo = 4,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
